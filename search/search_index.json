{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Julia Devito Inversion framework (JUDI.jl) JUDI is a framework for large-scale seismic modeling and inversion and designed to enable rapid translations of algorithms to fast and efficient code that scales to industry-size 3D problems. Wave equations in JUDI are solved with Devito , a Python domain-specific language for automated finite-difference (FD) computations. Overview This documentation provides an overview over JUDI's basic data structures and abstract operators: Data structures : Explains the Model , Geometry and Info data structures and how to set up acquisition geometries. Abstract vectors : Documents JUDI's abstract vector classes judiVector , judiWavefield , judiRHS , judiWeights and judiExtendedSource . Abstract operators : Lists and explains JUDI's abstract linear operators judiModeling , judiJacobian , judiProjection and judiLRWF . IO : Read SEG-Y data and set up judiVectors for shot records and sources. Read velocity models. How to : Answers FAQs, such as \"how to set up simultaneous sources\" or \"how to manually set the computational time step\". Installation First, install Devito using pip , or see the Devito's GitHub page for installation with Conda and further information. The current release of JUDI requires Python 3 and the current Devito version. Run all of the following commands from the (bash) terminal command line (not in the Julia REPL): pip3 install --user git+https://github.com/devitocodes/devito.git For reading and writing seismic SEG-Y data, JUDI uses the SegyIO package and matrix-free linear operators are based the Julia Operator LIbrary (JOLI): julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/SegyIO.jl\"))' julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JOLI.jl\"))' Once Devito, SegyIO and JOLI are installed, you can install JUDI as follows: julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JUDI.jl\"))' Once you have JUDI installed, you need to point Julia's PyCall package to the Python version for which we previsouly installed Devito. To do this, copy-paste the following commands into the (bash) terminal: export PYTHON=$(which python3) julia -e 'using Pkg; Pkg.build(\"PyCall\")' Running with Docker If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook: docker run -p 8888:8888 philippwitte/judi:v1.3 This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with: docker run -it philippwitte/judi:v1.3 /bin/bash Inside the container, all examples are located in the directory /app/judi/examples/scripts . Configure compiler and OpenMP Devito uses just-in-time compilation for the underlying wave equation solves. The default compiler is intel, but can be changed to any other specified compiler such as gnu . Either run the following command from the command line or add it to your ~/.bashrc file: export DEVITO_ARCH=gnu Devito uses shared memory OpenMP parallelism for solving PDEs. OpenMP is disabled by default, but you can enable OpenMP and define the number of threads (per PDE solve) as follows: export DEVITO_LANGUAGE=openmp # Enable OpenMP. export OMP_NUM_THREADS=4 # Number of OpenMP threads Troubleshooting For troubleshooting please raise an issue on the JUDI github page or contact Philipp Witte at pwitte3@gatech.edu or Mathias Louboutin at mlouboutin3@gatech.edu","title":"Home"},{"location":"#the-julia-devito-inversion-framework-judijl","text":"JUDI is a framework for large-scale seismic modeling and inversion and designed to enable rapid translations of algorithms to fast and efficient code that scales to industry-size 3D problems. Wave equations in JUDI are solved with Devito , a Python domain-specific language for automated finite-difference (FD) computations.","title":"The Julia Devito Inversion framework (JUDI.jl)"},{"location":"#overview","text":"This documentation provides an overview over JUDI's basic data structures and abstract operators: Data structures : Explains the Model , Geometry and Info data structures and how to set up acquisition geometries. Abstract vectors : Documents JUDI's abstract vector classes judiVector , judiWavefield , judiRHS , judiWeights and judiExtendedSource . Abstract operators : Lists and explains JUDI's abstract linear operators judiModeling , judiJacobian , judiProjection and judiLRWF . IO : Read SEG-Y data and set up judiVectors for shot records and sources. Read velocity models. How to : Answers FAQs, such as \"how to set up simultaneous sources\" or \"how to manually set the computational time step\".","title":"Overview"},{"location":"#installation","text":"First, install Devito using pip , or see the Devito's GitHub page for installation with Conda and further information. The current release of JUDI requires Python 3 and the current Devito version. Run all of the following commands from the (bash) terminal command line (not in the Julia REPL): pip3 install --user git+https://github.com/devitocodes/devito.git For reading and writing seismic SEG-Y data, JUDI uses the SegyIO package and matrix-free linear operators are based the Julia Operator LIbrary (JOLI): julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/SegyIO.jl\"))' julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JOLI.jl\"))' Once Devito, SegyIO and JOLI are installed, you can install JUDI as follows: julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JUDI.jl\"))' Once you have JUDI installed, you need to point Julia's PyCall package to the Python version for which we previsouly installed Devito. To do this, copy-paste the following commands into the (bash) terminal: export PYTHON=$(which python3) julia -e 'using Pkg; Pkg.build(\"PyCall\")'","title":"Installation"},{"location":"#running-with-docker","text":"If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook: docker run -p 8888:8888 philippwitte/judi:v1.3 This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with: docker run -it philippwitte/judi:v1.3 /bin/bash Inside the container, all examples are located in the directory /app/judi/examples/scripts .","title":"Running with Docker"},{"location":"#configure-compiler-and-openmp","text":"Devito uses just-in-time compilation for the underlying wave equation solves. The default compiler is intel, but can be changed to any other specified compiler such as gnu . Either run the following command from the command line or add it to your ~/.bashrc file: export DEVITO_ARCH=gnu Devito uses shared memory OpenMP parallelism for solving PDEs. OpenMP is disabled by default, but you can enable OpenMP and define the number of threads (per PDE solve) as follows: export DEVITO_LANGUAGE=openmp # Enable OpenMP. export OMP_NUM_THREADS=4 # Number of OpenMP threads","title":"Configure compiler and OpenMP"},{"location":"#troubleshooting","text":"For troubleshooting please raise an issue on the JUDI github page or contact Philipp Witte at pwitte3@gatech.edu or Mathias Louboutin at mlouboutin3@gatech.edu","title":"Troubleshooting"},{"location":"about/","text":"Authors This documentation was created by Philipp A. Witte ( pwitte3@gatech.edu ) from the Georgia Institute of Technology. People involved in the development of JUDI include: Philipp A. Witte (Georgia Institute of Technology) Mathias Louboutin (Georgia Institute of Technology) Henryk Modzelewski (The Univeristy of British Columbia) Felix J. Herrmann (Georgia Institute of Technology) The research of this project was carried out at the Seismic Laboratory for Imaging and Modeling (SLIM) at the Georgia Institute of Technology, Atlanta, USA and at the University of British Columbia (UBC), in Vancouver, Canada.","title":"About"},{"location":"about/#authors","text":"This documentation was created by Philipp A. Witte ( pwitte3@gatech.edu ) from the Georgia Institute of Technology. People involved in the development of JUDI include: Philipp A. Witte (Georgia Institute of Technology) Mathias Louboutin (Georgia Institute of Technology) Henryk Modzelewski (The Univeristy of British Columbia) Felix J. Herrmann (Georgia Institute of Technology) The research of this project was carried out at the Seismic Laboratory for Imaging and Modeling (SLIM) at the Georgia Institute of Technology, Atlanta, USA and at the University of British Columbia (UBC), in Vancouver, Canada.","title":"Authors"},{"location":"abstract_vectors/","text":"Abstract JUDI vectors judiVector The class judiVector is the basic data structure for seismic shot records or seismic sources. From JUDI's perspective, both are treated the same and can be multiplied with modeling operators. Construction: In the most basic way, judiVectors are contstructed from a Geometry object (containing either source or receiver geometry) and a cell array of data: x = judiVector(geometry, data) Parameters: geometry : A Geometry object containing source or receiver geometries. data : A cell array with one cell per source location, where each cell contains a 1D/2D Julia array with either the receiver data or the source wavelet. Alternatively: pass a single Julia array which will be used for all source locations. Access fields (in-core data containers): # Access i-th shot record x.data[i] # Extract judiVector for i-th shot x1 = x[i] # Access receiver locations of i-th shot x.geometry.xloc[i] Access fields (out-of-core data containers): # Access data container of i-th shot x.data[i] # Read data from i-th shot into memory x.data[i][1].data # Access out-of-core geometry x.geometry # Load OOC geometry into memory Geometry(x.geometry) Operations: In-core judiVectors can be used like regular Julia arrays and support common operations such as: x = judiVector(geometry, data) # Size (as if all data was vectorized) size(x) # Norms norm(x) # Inner product dot(x, x) # Addition, subtraction (geometries must match) y = x + x z = x - y # Scaling \u03b1 = 2f0 y = x * \u03b1 # Concatenate y = vcat(x, x) judiWavefield Abstract vector class for wavefields. Construction: u = judiWavefield(info, dt, data) Parameters: info : An Info structure. dt : Time sampling interval of wavefield. data : Cell array with one cell per source location. Each cell contains a 3D or 4D array for a seismic wavefield. The order of dimensions is (nt, nx, nz) (2D) and (nt, nx, ny, nz) (3D), where nt is the number of time steps. Access fields: # Access wavefield from i-th shot location u.data[i] Operations: Supports some basic arithmetric operations: # Size size(u) # Norms norm(u) # Inner product dot(u, y) # Addition, subtraction v = u + u z = u - v # Absolute value abs(u) # Concatenation v = vcat(u, u) judiRHS Abstract vector class for a right-hand-side (RHS). A RHS has the size of a full wavefield, but only contains the data of the source wavelet of shot records in memory, as well as the geometry information of where the data is injected during modeling. Construction: rhs = judiRHS(info, geometry, data) A JUDI RHS can also be constructed by multplying a judiVector and the corresponding transpose of a judiProjection operator: rhs1 = Ps'*q rhs2 = Pr'*d_obs where Ps and Pr are judiProjection operators for sources and receivers respectively and q and d_obs are judiVectors with the source and receiver data. Parameters: info : An Info structure. geometry : A JUDI Geometry structure, containing the source or receiver geometry. data : A cell array with one cell per source location. Each cell contains a 1D/2D Julia array with the source or receiver data. Access fields: Accessible fields include: # Source/receiver data rhs.data # Source/receiver geometry rhs.geometry # Info structure rhs.info judiWeights Abstract vector class for extended source weights. The weights for each shot location have the dimensions of the model (namely model.n ). Construction: w = judiWeights(weights) Parameters: weights : Cell array with one cell per shot location. Each cell contains a 2D/3D Julia array with the weights for the spatially extended source. Alternatively: pass a single Julia array which will be used for all source locations. Access fields: # Access weights of i-th shot locatoin w.weights[i] Operations: Supports the same arithmetric operations as a judiVector . judiExtendedSource Abstract data vector for an extended source. This data structure is the equivalent type of judiRHS for extended source modeling. A judiExtendedSource has the dimension of the full wavefield, but only contains the 1D wavelet and the 2D/3D spatially varying weights in memory. Construction: Construction from weights and source wavelets: ex_src = judiExtendedSource(info, wavelet, weights) Construction from a judiWeights vector and a judiLRWF injection operator: ex_src = Pw'*w where Pw is a judiLRWF operator and w is a judiWeights vector. Parameters: info : An Info structure. wavelet : A cell array with one cell per source location containing a 1D Julia array with the time varying source wavelet or a single 1D Julia array, which is used for all source locations. weights : A cell array with one cell per source location containing a 2D/3D Julia array with the spatially varying source weights or a single 1D Julia array, which is used for all source locations. Access fields: # Access weights of i-th source location ex_src.weights[i] # Access wavelet of i-th source location ex_src.wavelet[i]","title":"Abstract vectors"},{"location":"abstract_vectors/#abstract-judi-vectors","text":"","title":"Abstract JUDI vectors"},{"location":"abstract_vectors/#judivector","text":"The class judiVector is the basic data structure for seismic shot records or seismic sources. From JUDI's perspective, both are treated the same and can be multiplied with modeling operators. Construction: In the most basic way, judiVectors are contstructed from a Geometry object (containing either source or receiver geometry) and a cell array of data: x = judiVector(geometry, data) Parameters: geometry : A Geometry object containing source or receiver geometries. data : A cell array with one cell per source location, where each cell contains a 1D/2D Julia array with either the receiver data or the source wavelet. Alternatively: pass a single Julia array which will be used for all source locations. Access fields (in-core data containers): # Access i-th shot record x.data[i] # Extract judiVector for i-th shot x1 = x[i] # Access receiver locations of i-th shot x.geometry.xloc[i] Access fields (out-of-core data containers): # Access data container of i-th shot x.data[i] # Read data from i-th shot into memory x.data[i][1].data # Access out-of-core geometry x.geometry # Load OOC geometry into memory Geometry(x.geometry) Operations: In-core judiVectors can be used like regular Julia arrays and support common operations such as: x = judiVector(geometry, data) # Size (as if all data was vectorized) size(x) # Norms norm(x) # Inner product dot(x, x) # Addition, subtraction (geometries must match) y = x + x z = x - y # Scaling \u03b1 = 2f0 y = x * \u03b1 # Concatenate y = vcat(x, x)","title":"judiVector"},{"location":"abstract_vectors/#judiwavefield","text":"Abstract vector class for wavefields. Construction: u = judiWavefield(info, dt, data) Parameters: info : An Info structure. dt : Time sampling interval of wavefield. data : Cell array with one cell per source location. Each cell contains a 3D or 4D array for a seismic wavefield. The order of dimensions is (nt, nx, nz) (2D) and (nt, nx, ny, nz) (3D), where nt is the number of time steps. Access fields: # Access wavefield from i-th shot location u.data[i] Operations: Supports some basic arithmetric operations: # Size size(u) # Norms norm(u) # Inner product dot(u, y) # Addition, subtraction v = u + u z = u - v # Absolute value abs(u) # Concatenation v = vcat(u, u)","title":"judiWavefield"},{"location":"abstract_vectors/#judirhs","text":"Abstract vector class for a right-hand-side (RHS). A RHS has the size of a full wavefield, but only contains the data of the source wavelet of shot records in memory, as well as the geometry information of where the data is injected during modeling. Construction: rhs = judiRHS(info, geometry, data) A JUDI RHS can also be constructed by multplying a judiVector and the corresponding transpose of a judiProjection operator: rhs1 = Ps'*q rhs2 = Pr'*d_obs where Ps and Pr are judiProjection operators for sources and receivers respectively and q and d_obs are judiVectors with the source and receiver data. Parameters: info : An Info structure. geometry : A JUDI Geometry structure, containing the source or receiver geometry. data : A cell array with one cell per source location. Each cell contains a 1D/2D Julia array with the source or receiver data. Access fields: Accessible fields include: # Source/receiver data rhs.data # Source/receiver geometry rhs.geometry # Info structure rhs.info","title":"judiRHS"},{"location":"abstract_vectors/#judiweights","text":"Abstract vector class for extended source weights. The weights for each shot location have the dimensions of the model (namely model.n ). Construction: w = judiWeights(weights) Parameters: weights : Cell array with one cell per shot location. Each cell contains a 2D/3D Julia array with the weights for the spatially extended source. Alternatively: pass a single Julia array which will be used for all source locations. Access fields: # Access weights of i-th shot locatoin w.weights[i] Operations: Supports the same arithmetric operations as a judiVector .","title":"judiWeights"},{"location":"abstract_vectors/#judiextendedsource","text":"Abstract data vector for an extended source. This data structure is the equivalent type of judiRHS for extended source modeling. A judiExtendedSource has the dimension of the full wavefield, but only contains the 1D wavelet and the 2D/3D spatially varying weights in memory. Construction: Construction from weights and source wavelets: ex_src = judiExtendedSource(info, wavelet, weights) Construction from a judiWeights vector and a judiLRWF injection operator: ex_src = Pw'*w where Pw is a judiLRWF operator and w is a judiWeights vector. Parameters: info : An Info structure. wavelet : A cell array with one cell per source location containing a 1D Julia array with the time varying source wavelet or a single 1D Julia array, which is used for all source locations. weights : A cell array with one cell per source location containing a 2D/3D Julia array with the spatially varying source weights or a single 1D Julia array, which is used for all source locations. Access fields: # Access weights of i-th source location ex_src.weights[i] # Access wavelet of i-th source location ex_src.wavelet[i]","title":"judiExtendedSource"},{"location":"data_structures/","text":"Data structures Model structure Data structure for velocity models in JUDI. Construction: Model requires the following input arguments: model = Model(n, d, o, m; nb=40, rho=1f0) Parameters: n : Integer tuple with number of grid points in each dimension, e.g. n = (120, 100) (2D) or n = (120, 100, 80) (3D). The order of dimenions in all tuples is (x, z) for 2D and (x, y, z) for 3D . d : Real tuple with grid spacing in each dimension. o : Real tuple with coordinate origin (typically o = (0f0, 0f0) ). m : 2D or 3D array of the velocity model in squared slowness [s^2/km^2] . nb : Number of absorbing boundary points on each edge. Default is nb = 40 . rho : 2D or 3D array of the density in [g / cm^3] Access fields: Accessible fields include all of the above parameters, which can be accessed as follows: # Access model model.m # Access number of grid points model.n Geometry structure JUDI's geometry structure contains the information of either the source or the receiver geometry. Construction: Construct an (in-core) geometry object for either a source or receiver set up: geometry = Geometry(xloc, yloc, zloc; dt=[], nt=[], t=[]) Parameters: xloc : Cell array, with one cell per source location. Each cell contains a 1D Julia array with the coordinates in the horizontal x direction. Coordinates are specified as distances in meters [m] relative to the model origin. yloc : Cell array for horizontal y coordinates. For 2D, set each cell entry to 0f0 . zloc : Cell array for depth coordinates (z) at each source location. dt : Cell array with the time intervals at which the data was sampled (i.e. a shot record or source wavelet was sampled). Units in milliseconds [ms] . nt : Cell array with number of time samples. t : Cell array with the recording lengths in milliseconds [ms] . From the optional arguments, you have to pass (at least) two of dt , nt and t . The third value is automatically determined and set from the two other values. Access fields: Example of how to access fields of geometry objects: # Access cell arrays of x coordinates: geometry.xloc # Access x coordinates of the i-th source location geometry.xloc[i] # Access j-th receiver location (in x) of the i-th source location geometry.xloc[i][j] Info structure The info structure contains some basic dimensionality information that needs to be available to any type of linear operator: info = Info(n, nsrc, nt) Parameters : n : Total number of grid points in all dimensions. Given by prod(model.n) . nsrc : Number of source/shot locations in the seismic experiment. nt : Number of computational time steps. You can automatically obtain the number of computational time steps as follows: nt = get_computational_nt(src_geometry, rec_geometry, model) where src_geometry is a Geometry object with the source geometry, rec_geometry is a Geometry object with the receiver geometry and model is a Model structure.","title":"Data structures"},{"location":"data_structures/#data-structures","text":"","title":"Data structures"},{"location":"data_structures/#model-structure","text":"Data structure for velocity models in JUDI. Construction: Model requires the following input arguments: model = Model(n, d, o, m; nb=40, rho=1f0) Parameters: n : Integer tuple with number of grid points in each dimension, e.g. n = (120, 100) (2D) or n = (120, 100, 80) (3D). The order of dimenions in all tuples is (x, z) for 2D and (x, y, z) for 3D . d : Real tuple with grid spacing in each dimension. o : Real tuple with coordinate origin (typically o = (0f0, 0f0) ). m : 2D or 3D array of the velocity model in squared slowness [s^2/km^2] . nb : Number of absorbing boundary points on each edge. Default is nb = 40 . rho : 2D or 3D array of the density in [g / cm^3] Access fields: Accessible fields include all of the above parameters, which can be accessed as follows: # Access model model.m # Access number of grid points model.n","title":"Model structure"},{"location":"data_structures/#geometry-structure","text":"JUDI's geometry structure contains the information of either the source or the receiver geometry. Construction: Construct an (in-core) geometry object for either a source or receiver set up: geometry = Geometry(xloc, yloc, zloc; dt=[], nt=[], t=[]) Parameters: xloc : Cell array, with one cell per source location. Each cell contains a 1D Julia array with the coordinates in the horizontal x direction. Coordinates are specified as distances in meters [m] relative to the model origin. yloc : Cell array for horizontal y coordinates. For 2D, set each cell entry to 0f0 . zloc : Cell array for depth coordinates (z) at each source location. dt : Cell array with the time intervals at which the data was sampled (i.e. a shot record or source wavelet was sampled). Units in milliseconds [ms] . nt : Cell array with number of time samples. t : Cell array with the recording lengths in milliseconds [ms] . From the optional arguments, you have to pass (at least) two of dt , nt and t . The third value is automatically determined and set from the two other values. Access fields: Example of how to access fields of geometry objects: # Access cell arrays of x coordinates: geometry.xloc # Access x coordinates of the i-th source location geometry.xloc[i] # Access j-th receiver location (in x) of the i-th source location geometry.xloc[i][j]","title":"Geometry structure"},{"location":"data_structures/#info-structure","text":"The info structure contains some basic dimensionality information that needs to be available to any type of linear operator: info = Info(n, nsrc, nt) Parameters : n : Total number of grid points in all dimensions. Given by prod(model.n) . nsrc : Number of source/shot locations in the seismic experiment. nt : Number of computational time steps. You can automatically obtain the number of computational time steps as follows: nt = get_computational_nt(src_geometry, rec_geometry, model) where src_geometry is a Geometry object with the source geometry, rec_geometry is a Geometry object with the receiver geometry and model is a Model structure.","title":"Info structure"},{"location":"how_to/","text":"Tutorials Set up simple 2D experiment Working with wavefields Extended source modeling On-the-fly DFTs Simultaneous sources","title":"Tutorials"},{"location":"how_to/#tutorials","text":"","title":"Tutorials"},{"location":"how_to/#set-up-simple-2d-experiment","text":"","title":"Set up simple 2D experiment"},{"location":"how_to/#working-with-wavefields","text":"","title":"Working with wavefields"},{"location":"how_to/#extended-source-modeling","text":"","title":"Extended source modeling"},{"location":"how_to/#on-the-fly-dfts","text":"","title":"On-the-fly DFTs"},{"location":"how_to/#simultaneous-sources","text":"","title":"Simultaneous sources"},{"location":"io/","text":"Input/Output For reading and writing SEG-Y data, JUDI uses the SegyIO.jl package. JUDI supports reading SEG-Y from disk into memory, as well as working with out-of-core (OOC) data containers. In the latter case, judiVectors contain look-up tables that allow accessing the underlying data in constant time. Reading SEG-Y files into memory To read a single SEG-Y file into memory, use the segy_read function: using SegyIO block = segy_read(\"data.segy\") From a SegyIO data block, you can create an in-core judiVector , as well as a Geometry object for the source: # judiVector for observed data d_obs = judiVector(block; segy_depth_key=\"RecGroupElevation\") # Source geometry src_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\") The optional keyword segy_depth_key specifies which SEG-Y header stores the depth coordinate. After reading a block , you can check block.traceheaders to see which trace headers are set and where to find the depth coordinates for sources or receivers. The d_obs vector constains the receiver geometry in d_obs.geometry , so there is no need to set up a separate geometry object manually. However, in principle we can set up a receiver Geometry object as follows: rec_geometry = Geometry(block; key=\"receiver\", segy_depth_key=\"RecGroupElevation\") Writing SEG-Y files To write a judiVector as a SEG-Y file, we need a judiVector containing the receiver data and geometry, as well as a judiVector with the source coordinates. From the judiVectors , we first create a SegyIO block: block = judiVector_to_SeisBlock(d_obs, q) where d_obs and q are judiVectors for receiver and source data respectively. Next, we can write a SEG-Y file from a SegyIO block : segy_write(\"new_file.segy\", block) # writes a SEG-Y file called new_file.segy Reading out-of-core SEG-Y files For SEG-Y files that do not fit into memory, JUDI provides the possibility to work with OOC data containers. First, SegyIO scans also available files and then creates a lookup table, including a summary of the most important SEG-Y header values. See SegyIO's documentation for more information. First we provide the path to the directory that we want to scan, as well as a string that appears in all the files we want to scan. For example, here we want to scan all files that contain the string \"bp_observed_data\" . The third argument is a list of SEG-Y headers for which we create a summary. For creating OOC judiVectors , always include the \"GroupX\" , \"GroupY\" and \"dt\" keyworkds, as well as the keywords that carry the source and receiver depth coordinates: # Specify direcotry to scan path_to_data = \"/home/username/data_directory/\" # Scan files in given directory and create OOC data container container = segy_scan(path_to_data, \"bp_observed_data\", [\"GroupX\", \"GroupY\", \"RecGroupElevation\", \"SourceDepth\", \"dt\"]) Depending of the number and size of the underlying files, this process can take multiple hours, but it only has to be executed once! Furthermore, parallel scanning is supported as well. Once we have scanned all files in the directory, we can create an OOC judiVector and source Geometry object as follows: # Create OOC judiVector d_obs = judiVector(container; segy_depth_key=\"RecGroupElevation\") # Create OOC source geometry object src_geometry = Geometry(container; key=\"source\", segy_depth_key=\"SourceDepth\") Reading and writing velocity models JUDI does not require velocity models to be read or saved in any specific format. Any file format that allows reading the velocity model as a two or three-dimensional Julia array will work. In our examples, we often use the JLD or HDF5 packages to read/write velocity models and the corresponing meta data (i.e. grid spacings and origins). If your model is a SEG-Y file, use the segy_read function from SegyIO as shown above. Create an example model to write and read: n = (120, 100) d = (10.0, 10.0) o = (0.0, 0.0) v = ones(Float32, n) .* 1.5f0 m = 1f0 ./ v.^2 Write a model as a .jld file: using JLD save(\"my_model.jld\", \"n\", n, \"d\", d, \"o\", o, \"m\", m) Read a model from a .jld file: # Returns a Julia dictionary M = load(\"my_model.jld\") n = M[\"n\"] d = M[\"d\"] o = M[\"o\"] m = M[\"m\"] # Set up a Model object model = Model(n, d, o, m)","title":"Input/Output"},{"location":"io/#inputoutput","text":"For reading and writing SEG-Y data, JUDI uses the SegyIO.jl package. JUDI supports reading SEG-Y from disk into memory, as well as working with out-of-core (OOC) data containers. In the latter case, judiVectors contain look-up tables that allow accessing the underlying data in constant time.","title":"Input/Output"},{"location":"io/#reading-seg-y-files-into-memory","text":"To read a single SEG-Y file into memory, use the segy_read function: using SegyIO block = segy_read(\"data.segy\") From a SegyIO data block, you can create an in-core judiVector , as well as a Geometry object for the source: # judiVector for observed data d_obs = judiVector(block; segy_depth_key=\"RecGroupElevation\") # Source geometry src_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\") The optional keyword segy_depth_key specifies which SEG-Y header stores the depth coordinate. After reading a block , you can check block.traceheaders to see which trace headers are set and where to find the depth coordinates for sources or receivers. The d_obs vector constains the receiver geometry in d_obs.geometry , so there is no need to set up a separate geometry object manually. However, in principle we can set up a receiver Geometry object as follows: rec_geometry = Geometry(block; key=\"receiver\", segy_depth_key=\"RecGroupElevation\")","title":"Reading SEG-Y files into memory"},{"location":"io/#writing-seg-y-files","text":"To write a judiVector as a SEG-Y file, we need a judiVector containing the receiver data and geometry, as well as a judiVector with the source coordinates. From the judiVectors , we first create a SegyIO block: block = judiVector_to_SeisBlock(d_obs, q) where d_obs and q are judiVectors for receiver and source data respectively. Next, we can write a SEG-Y file from a SegyIO block : segy_write(\"new_file.segy\", block) # writes a SEG-Y file called new_file.segy","title":"Writing SEG-Y files"},{"location":"io/#reading-out-of-core-seg-y-files","text":"For SEG-Y files that do not fit into memory, JUDI provides the possibility to work with OOC data containers. First, SegyIO scans also available files and then creates a lookup table, including a summary of the most important SEG-Y header values. See SegyIO's documentation for more information. First we provide the path to the directory that we want to scan, as well as a string that appears in all the files we want to scan. For example, here we want to scan all files that contain the string \"bp_observed_data\" . The third argument is a list of SEG-Y headers for which we create a summary. For creating OOC judiVectors , always include the \"GroupX\" , \"GroupY\" and \"dt\" keyworkds, as well as the keywords that carry the source and receiver depth coordinates: # Specify direcotry to scan path_to_data = \"/home/username/data_directory/\" # Scan files in given directory and create OOC data container container = segy_scan(path_to_data, \"bp_observed_data\", [\"GroupX\", \"GroupY\", \"RecGroupElevation\", \"SourceDepth\", \"dt\"]) Depending of the number and size of the underlying files, this process can take multiple hours, but it only has to be executed once! Furthermore, parallel scanning is supported as well. Once we have scanned all files in the directory, we can create an OOC judiVector and source Geometry object as follows: # Create OOC judiVector d_obs = judiVector(container; segy_depth_key=\"RecGroupElevation\") # Create OOC source geometry object src_geometry = Geometry(container; key=\"source\", segy_depth_key=\"SourceDepth\")","title":"Reading out-of-core SEG-Y files"},{"location":"io/#reading-and-writing-velocity-models","text":"JUDI does not require velocity models to be read or saved in any specific format. Any file format that allows reading the velocity model as a two or three-dimensional Julia array will work. In our examples, we often use the JLD or HDF5 packages to read/write velocity models and the corresponing meta data (i.e. grid spacings and origins). If your model is a SEG-Y file, use the segy_read function from SegyIO as shown above. Create an example model to write and read: n = (120, 100) d = (10.0, 10.0) o = (0.0, 0.0) v = ones(Float32, n) .* 1.5f0 m = 1f0 ./ v.^2 Write a model as a .jld file: using JLD save(\"my_model.jld\", \"n\", n, \"d\", d, \"o\", o, \"m\", m) Read a model from a .jld file: # Returns a Julia dictionary M = load(\"my_model.jld\") n = M[\"n\"] d = M[\"d\"] o = M[\"o\"] m = M[\"m\"] # Set up a Model object model = Model(n, d, o, m)","title":"Reading and writing velocity models"},{"location":"linear_operators/","text":"Linear Operators judiModeling Seismic modeling operator for solving a wave equation for a given right-hand-side. Construction: Construct a modeling operator without source/receiver projections: F = judiModeling(info, model) Construct a modeling operator with source/receiver projections: F = judiModeling(info, model, src_geometry, rec_geometry) Construct a modeling operator from an existing operator without geometries and projection operators: F = Pr*F*Ps' where Ps and Pr are source/receiver projection operators of type judiProjection . Construct a modeling operator for extended source modeling : F = Pr*F*Pw' where Pw is a judiLRWF (low-rank-wavefield) projection operator. Parameters: info : A Info structure. model : A Model structure containg the velocity model and grid specifications. src_geometry : An object of type Geometry containing the source geometry. rec_geometry : An object of type Geometry containing the receiver geometry. Accessible fields: # Info structure F.info # Model structure F.model # Source geometry (if available) F.srcGeometry # Receiver geometry (if available) F.recGeometry Usage: # Forward modeling (F w/ geometries) d_obs = F*q # Adjoint modeling (F w/ geometries) q_ad = F'*d_obs # Forward modeling (F w/o geometries) d_obs = Pr*F*Ps'*q # Adjoint modelng (F w/o geometries) q_ad = Ps*F'*Pr'*d_obs # Extended source modeling (F w/o geometries) d_obs = Pr*F*Pw'*w # Adjoint extended source modeling (F w/o geometries) w_ad = Pw*F'*Pr'*d_obs # Forward modeling and return full wavefield (F w/o geometries) u = F*Ps'*q # Adjoint modelnig and return wavefield (F w/o geometries) v = F'*Pr'*d_obs # Forward modeling with full wavefield as source (F w/o geometries) d_obs = Pr*F*u # Adjoint modeling with full wavefield as source (F w/o geometries) q_ad = Ps*F*v judiJacobian Jacobian of a non-linear forward modeling operator. Corresponds to linearized Born modeling (forward mode) and reverse-time migration (adjoint mode). Construction: A judiJacobian operator can be create from an exisiting forward modeling operator and a source vector: J = judiJacobian(F, q) # F w/ geometries J = judiJacobian(Pr*F*Ps', q) # F w/o geometries where Ps and Pr are source/receiver projection operators of type judiProjection . A Jacobian can also be created for an extended source modeling operator: J = judiJacobian(Pr*F*Pw', w) where Pw is a judiLRWF operator and w is a judiWeights vector (or 2D/3D Julia array). Accessible fields:: # Info structure J.info # Model structure J.model # Source geometry (if available) J.srcGeometry # Receiver geometry J.recGeometry # Source wavelet J.wavelet # Weights (extended source modeling only) J.weights # Options structure J.options Usage: # Linearized modeilng d_lin = J*dm # RTM rtm = J'*d_lin # Matrix-free normal operator H = J'*J judiProjection Abstract linear operator for source/receiver projections. A (transposed) judiProjection operator symbolically injects the data with which it is multiplied during modeling. If multiplied with a forward modeling operator, it samples the wavefield at the specified source/receiver locations. Construction: P = judiProjection(info, geometry) Parameters: info : A JUDI Info structure. geometry : A JUDI Geometry structure containing either the source or receiver acquisition set up.s Accessible fields: # Info structure P.info # Source/receiver geometry P.geometry Usage: # Multiply with judiVector to create a judiRHS rhs1 = Pr'*d_obs rhs2 = Ps'*q # Sample wavefield at source/receiver location during modeling d_obs = Pr*F*Ps'*q q_ad = Ps*F*Pr'*d_obs judiLRWF Abstract linear operator for sampling a seismic wavefield as a sum over all time steps, weighted by a time-varying wavelet. Its transpose injects a time-varying wavelet at every grid point in the model. Construction: P = judiLRWF(info, wavelet) Parameters: info : A JUDI Info structure. wavelet : A cell array with one cell per source location, where each cell contains a 1D Julia array of the source wavelet or a single Julia array which will be used for all source location. Accessible fields: # Info structure P.info # Wavelet of i-th source location P.wavelet[i] Usage: # Multiply with a judiWeight vector to create a judiExtendedSource ex_src = Pw'*w # Sample wavefield as a sum over time, weighted by the source u_ex = Pw*F'*Pr'*d_obs","title":"Linear operators"},{"location":"linear_operators/#linear-operators","text":"","title":"Linear Operators"},{"location":"linear_operators/#judimodeling","text":"Seismic modeling operator for solving a wave equation for a given right-hand-side. Construction: Construct a modeling operator without source/receiver projections: F = judiModeling(info, model) Construct a modeling operator with source/receiver projections: F = judiModeling(info, model, src_geometry, rec_geometry) Construct a modeling operator from an existing operator without geometries and projection operators: F = Pr*F*Ps' where Ps and Pr are source/receiver projection operators of type judiProjection . Construct a modeling operator for extended source modeling : F = Pr*F*Pw' where Pw is a judiLRWF (low-rank-wavefield) projection operator. Parameters: info : A Info structure. model : A Model structure containg the velocity model and grid specifications. src_geometry : An object of type Geometry containing the source geometry. rec_geometry : An object of type Geometry containing the receiver geometry. Accessible fields: # Info structure F.info # Model structure F.model # Source geometry (if available) F.srcGeometry # Receiver geometry (if available) F.recGeometry Usage: # Forward modeling (F w/ geometries) d_obs = F*q # Adjoint modeling (F w/ geometries) q_ad = F'*d_obs # Forward modeling (F w/o geometries) d_obs = Pr*F*Ps'*q # Adjoint modelng (F w/o geometries) q_ad = Ps*F'*Pr'*d_obs # Extended source modeling (F w/o geometries) d_obs = Pr*F*Pw'*w # Adjoint extended source modeling (F w/o geometries) w_ad = Pw*F'*Pr'*d_obs # Forward modeling and return full wavefield (F w/o geometries) u = F*Ps'*q # Adjoint modelnig and return wavefield (F w/o geometries) v = F'*Pr'*d_obs # Forward modeling with full wavefield as source (F w/o geometries) d_obs = Pr*F*u # Adjoint modeling with full wavefield as source (F w/o geometries) q_ad = Ps*F*v","title":"judiModeling"},{"location":"linear_operators/#judijacobian","text":"Jacobian of a non-linear forward modeling operator. Corresponds to linearized Born modeling (forward mode) and reverse-time migration (adjoint mode). Construction: A judiJacobian operator can be create from an exisiting forward modeling operator and a source vector: J = judiJacobian(F, q) # F w/ geometries J = judiJacobian(Pr*F*Ps', q) # F w/o geometries where Ps and Pr are source/receiver projection operators of type judiProjection . A Jacobian can also be created for an extended source modeling operator: J = judiJacobian(Pr*F*Pw', w) where Pw is a judiLRWF operator and w is a judiWeights vector (or 2D/3D Julia array). Accessible fields:: # Info structure J.info # Model structure J.model # Source geometry (if available) J.srcGeometry # Receiver geometry J.recGeometry # Source wavelet J.wavelet # Weights (extended source modeling only) J.weights # Options structure J.options Usage: # Linearized modeilng d_lin = J*dm # RTM rtm = J'*d_lin # Matrix-free normal operator H = J'*J","title":"judiJacobian"},{"location":"linear_operators/#judiprojection","text":"Abstract linear operator for source/receiver projections. A (transposed) judiProjection operator symbolically injects the data with which it is multiplied during modeling. If multiplied with a forward modeling operator, it samples the wavefield at the specified source/receiver locations. Construction: P = judiProjection(info, geometry) Parameters: info : A JUDI Info structure. geometry : A JUDI Geometry structure containing either the source or receiver acquisition set up.s Accessible fields: # Info structure P.info # Source/receiver geometry P.geometry Usage: # Multiply with judiVector to create a judiRHS rhs1 = Pr'*d_obs rhs2 = Ps'*q # Sample wavefield at source/receiver location during modeling d_obs = Pr*F*Ps'*q q_ad = Ps*F*Pr'*d_obs","title":"judiProjection"},{"location":"linear_operators/#judilrwf","text":"Abstract linear operator for sampling a seismic wavefield as a sum over all time steps, weighted by a time-varying wavelet. Its transpose injects a time-varying wavelet at every grid point in the model. Construction: P = judiLRWF(info, wavelet) Parameters: info : A JUDI Info structure. wavelet : A cell array with one cell per source location, where each cell contains a 1D Julia array of the source wavelet or a single Julia array which will be used for all source location. Accessible fields: # Info structure P.info # Wavelet of i-th source location P.wavelet[i] Usage: # Multiply with a judiWeight vector to create a judiExtendedSource ex_src = Pw'*w # Sample wavefield as a sum over time, weighted by the source u_ex = Pw*F'*Pr'*d_obs","title":"judiLRWF"},{"location":"tutorials/full_waveform_inversion/","text":"FWIwith Devito and JUDI addprocs(4) using SegyIO, HDF5, PyPlot, JUDI.TimeModeling, JUDI.SLIM_optim m0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\"); title(\"Starting model\") model0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0); imshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0)); xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); block = segy_read(\"overthrust_shot_records.segy\"); d_obs = judiVector(block); \u001b[1m\u001b[33mWARNING: \u001b[39m\u001b[22m\u001b[33mFixed length trace flag set in stream: IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=7076688, maxsize=Inf, ptr=3601, mark=-1)\u001b[39m println(typeof(d_obs)) JUDI.TimeModeling.judiVector{Float32} imshow(d_obs.data[8], cmap=\"seismic\", vmin=-3, vmax=3, extent=[0,size(d_obs.data[8],2),2,0]); ax1 = gca(); ax1[:set_aspect](\"auto\"); xlabel(\"Receiver no.\"); ylabel(\"Time [s]\") colorbar(); title(\"Observed data\") PyObject <matplotlib.text.Text object at 0x13bab1190> src_geometry = Geometry(block; key=\"source\"); src_data = ricker_wavelet(src_geometry.t[1], src_geometry.dt[1], 0.008f0); q = judiVector(src_geometry, src_data); plot(q.data[1]); ntComp = get_computational_nt(q.geometry, d_obs.geometry, model0); info = Info(prod(model0.n), d_obs.nsrc, ntComp); Ainv = judiModeling(info, model0); Pr = judiProjection(info, d_obs.geometry); Ps = judiProjection(info, q.geometry); i = 8; d_pred = Pr[i]*Ainv[i]*Ps[i]'*q[i]; imshow(d_pred.data[1], cmap=\"seismic\", vmin=-3, vmax=3, extent=[0,size(d_obs.data[8],2),2,0]); ax1 = gca(); ax1[:set_aspect](\"auto\"); xlabel(\"Receiver no.\"); ylabel(\"Time [s]\") colorbar(); title(\"Predicted data\") PyObject <matplotlib.text.Text object at 0x1253df150> J = judiJacobian(Pr*Ainv*Ps',q); #H_GN = J'*J # Gauss-Newton Hessian g = J[i]'*(d_pred - d_obs[i]); imshow(reshape(g,model0.n)',vmin=-2e2,vmax=2e2, cmap=\"GnBu\"); title(\"Single gradient\") PyObject <matplotlib.text.Text object at 0x125097d10> This is a markdown cell $\\mathbf{Ax} = \\mathbf{b}$ # Set up bound constrains v0 = sqrt.(1f0./model0.m) vmin = ones(Float32, model0.n)*1.3f0; vmax = ones(Float32, model0.n)*6.5f0; # Fix water column vmin[:,1:21] = v0[:,1:21]; vmax[:,1:21] = v0[:,1:21]; # Convert to squared slowness mmin = vec((1f0./vmax).^2); mmax = vec((1f0./vmin).^2); This example requires ~200 MB of memory per gradient, i.e. 800 MB with 4 parallel workers. It runs for approximately 15 minutes. maxiter = 10 batchsize = 8 proj(x) = reshape(median([vec(mmin) vec(x) vec(mmax)],2), model0.n) fhistory = zeros(Float32,maxiter) # Main loop for j=1:maxiter println(\"Iteration: \",j) # get fwi objective function value and gradient i = randperm(d_obs.nsrc)[1:batchsize] fval, gradient = fwi_objective(model0, q[i], d_obs[i]) fhistory[j] = fval # linesearch step = backtracking_linesearch(model0, q[i], d_obs[i], fval, gradient, proj; alpha=1f0) model0.m = proj(model0.m + reshape(step, model0.n)) end Iteration: 1 Iteration: 2 Iteration: 3 Iteration: 4 Iteration: 5 Iteration: 6 Iteration: 7 Iteration: 8 Iteration: 9 Iteration: 10 imshow(sqrt.(1f0./model0.m)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with SGD\") xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); DO NOT RUN. This example requires ~200 MB of memory per gradient, i.e. 800 MB with 4 parallel workers. It takes approximately 16 minutes per iteration and 2.5 hours for the full loop. # Optimization parameters using IterativeSolvers model0.m = m0 # reset velocity model maxiter_GN = 6 fhistory_GN = zeros(Float32,maxiter) # Gauss-Newton method for j=1:maxiter println(\"Iteration: \",j) # Model predicted data for subset of sources d_pred = Pr*Ainv*Ps'*q fhistory_GN[j] = .5f0*norm(d_pred - d_obs)^2 # GN update direction p = lsqr(J, d_pred - d_obs; maxiter=maxiter_GN, verbose=false) # update model and bound constraints model0.m = proj(model0.m - reshape(p, model0.n)) # alpha=1 end Iteration: 1 Iteration: 2 Iteration: 3 Iteration: 4 Iteration: 5 Iteration: 6 Iteration: 7 Iteration: 8 Iteration: 9 Iteration: 10 imshow(sqrt.(1f0./model0.m)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with GN method\") xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); fhistory_SG = fhistory/norm(fhistory,Inf); fhistory_GN = fhistory_GN/norm(fhistory_GN,Inf); plot(1:10, fhistory_SG, 1:10, fhistory_GN); xlabel(\"Iteration no.\"); ylabel(\"Normalized function value\"); PyObject <matplotlib.text.Text object at 0x123c19ed0>","title":"Full waveform inversion"},{"location":"tutorials/full_waveform_inversion/#fwiwith-devito-and-judi","text":"addprocs(4) using SegyIO, HDF5, PyPlot, JUDI.TimeModeling, JUDI.SLIM_optim m0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\"); title(\"Starting model\") model0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0); imshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0)); xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); block = segy_read(\"overthrust_shot_records.segy\"); d_obs = judiVector(block); \u001b[1m\u001b[33mWARNING: \u001b[39m\u001b[22m\u001b[33mFixed length trace flag set in stream: IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=7076688, maxsize=Inf, ptr=3601, mark=-1)\u001b[39m println(typeof(d_obs)) JUDI.TimeModeling.judiVector{Float32} imshow(d_obs.data[8], cmap=\"seismic\", vmin=-3, vmax=3, extent=[0,size(d_obs.data[8],2),2,0]); ax1 = gca(); ax1[:set_aspect](\"auto\"); xlabel(\"Receiver no.\"); ylabel(\"Time [s]\") colorbar(); title(\"Observed data\") PyObject <matplotlib.text.Text object at 0x13bab1190> src_geometry = Geometry(block; key=\"source\"); src_data = ricker_wavelet(src_geometry.t[1], src_geometry.dt[1], 0.008f0); q = judiVector(src_geometry, src_data); plot(q.data[1]); ntComp = get_computational_nt(q.geometry, d_obs.geometry, model0); info = Info(prod(model0.n), d_obs.nsrc, ntComp); Ainv = judiModeling(info, model0); Pr = judiProjection(info, d_obs.geometry); Ps = judiProjection(info, q.geometry); i = 8; d_pred = Pr[i]*Ainv[i]*Ps[i]'*q[i]; imshow(d_pred.data[1], cmap=\"seismic\", vmin=-3, vmax=3, extent=[0,size(d_obs.data[8],2),2,0]); ax1 = gca(); ax1[:set_aspect](\"auto\"); xlabel(\"Receiver no.\"); ylabel(\"Time [s]\") colorbar(); title(\"Predicted data\") PyObject <matplotlib.text.Text object at 0x1253df150> J = judiJacobian(Pr*Ainv*Ps',q); #H_GN = J'*J # Gauss-Newton Hessian g = J[i]'*(d_pred - d_obs[i]); imshow(reshape(g,model0.n)',vmin=-2e2,vmax=2e2, cmap=\"GnBu\"); title(\"Single gradient\") PyObject <matplotlib.text.Text object at 0x125097d10> This is a markdown cell $\\mathbf{Ax} = \\mathbf{b}$ # Set up bound constrains v0 = sqrt.(1f0./model0.m) vmin = ones(Float32, model0.n)*1.3f0; vmax = ones(Float32, model0.n)*6.5f0; # Fix water column vmin[:,1:21] = v0[:,1:21]; vmax[:,1:21] = v0[:,1:21]; # Convert to squared slowness mmin = vec((1f0./vmax).^2); mmax = vec((1f0./vmin).^2); This example requires ~200 MB of memory per gradient, i.e. 800 MB with 4 parallel workers. It runs for approximately 15 minutes. maxiter = 10 batchsize = 8 proj(x) = reshape(median([vec(mmin) vec(x) vec(mmax)],2), model0.n) fhistory = zeros(Float32,maxiter) # Main loop for j=1:maxiter println(\"Iteration: \",j) # get fwi objective function value and gradient i = randperm(d_obs.nsrc)[1:batchsize] fval, gradient = fwi_objective(model0, q[i], d_obs[i]) fhistory[j] = fval # linesearch step = backtracking_linesearch(model0, q[i], d_obs[i], fval, gradient, proj; alpha=1f0) model0.m = proj(model0.m + reshape(step, model0.n)) end Iteration: 1 Iteration: 2 Iteration: 3 Iteration: 4 Iteration: 5 Iteration: 6 Iteration: 7 Iteration: 8 Iteration: 9 Iteration: 10 imshow(sqrt.(1f0./model0.m)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with SGD\") xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); DO NOT RUN. This example requires ~200 MB of memory per gradient, i.e. 800 MB with 4 parallel workers. It takes approximately 16 minutes per iteration and 2.5 hours for the full loop. # Optimization parameters using IterativeSolvers model0.m = m0 # reset velocity model maxiter_GN = 6 fhistory_GN = zeros(Float32,maxiter) # Gauss-Newton method for j=1:maxiter println(\"Iteration: \",j) # Model predicted data for subset of sources d_pred = Pr*Ainv*Ps'*q fhistory_GN[j] = .5f0*norm(d_pred - d_obs)^2 # GN update direction p = lsqr(J, d_pred - d_obs; maxiter=maxiter_GN, verbose=false) # update model and bound constraints model0.m = proj(model0.m - reshape(p, model0.n)) # alpha=1 end Iteration: 1 Iteration: 2 Iteration: 3 Iteration: 4 Iteration: 5 Iteration: 6 Iteration: 7 Iteration: 8 Iteration: 9 Iteration: 10 imshow(sqrt.(1f0./model0.m)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with GN method\") xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); fhistory_SG = fhistory/norm(fhistory,Inf); fhistory_GN = fhistory_GN/norm(fhistory_GN,Inf); plot(1:10, fhistory_SG, 1:10, fhistory_GN); xlabel(\"Iteration no.\"); ylabel(\"Normalized function value\"); PyObject <matplotlib.text.Text object at 0x123c19ed0>","title":"FWIwith Devito and JUDI"},{"location":"tutorials/fwi_example_NLopt/","text":"FWI with Quasi-Newton methods from the NLopt library In this notebook, we demonstrate how to interface the NLopt optimization library for full-waveform inversion with a limited-memory Quasi-Newton (L-BFGS) algorithm. Once again, we start by adding additional workers for parallel computing and by loading all necessary modules: addprocs(2) using SegyIO, HDF5, PyPlot, JUDI.TimeModeling, NLopt We load the FWI starting model from the HDF5 model file and set up the JUDI model structure: m0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\"); title(\"Starting model\") model0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0); imshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0)); xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); Then we read the SEG-Y file containing our test data set. The data was generated with a 2D excerpt from the Overthrust velocity model and consists of 31 shot records with 2 seconds recording time. We load the data and set up a JUDI seismic data vector: block = segy_read(\"overthrust_shot_records.segy\"); d_obs = judiVector(block); Since the SEG-Y file contains the source coordinates, but not the wavelet itself, we create a JUDI Geometry structure for the source and then manually set up an 8 Hz Ricker wavelet. As for the observed data, we set up a JUDI seismic data vector q with the source geometry and wavelet: src_geometry = Geometry(block; key=\"source\"); src_data = ricker_wavelet(src_geometry.t[1], src_geometry.dt[1], 0.008f0); q = judiVector(src_geometry, src_data); Optimization Rather than implementing the L-BFGS algorithms in Julia ourselves, we interface the NLopt optimization library. This library requires objective functions with the current variable and gradient as input arguments and the function value as the only output argument. For this reason, we build a wrapper that is customized for the NLopt library around our fwi_objective function. The function f! takes a vectorized estimate of the current model as well as the (vectorized) gradient as input arguments. NLopt uses double precision for floating point variables, so the first step inside f! is to reshape and convert the model to single precision. Then we choose a randomized subset of sources and shot records and compute the function value fval and gradient of the FWI objective function. We then set the gradient in the water layer to zero and overwrite the input gradient grad with the new gradient. Furthermore, we keep track of the number of function evaluations through increasing the count variable, which will serve as the termination criterion for the algorithm. In Julia, we set up f! in the following way: batchsize = 8; count = 0; # NLopt objective function println(\"No. \", \"fval \", \"norm(gradient)\"); function f!(x,grad) # Update model model0.m = convert(Array{Float32,2}, reshape(x,model0.n)) # Seclect batch and calculate gradient i = randperm(d_obs.nsrc)[1:batchsize] fval, gradient = fwi_objective(model0, q[i], d_obs[i]) # Reset gradient in water column to zero gradient = reshape(gradient, model0.n); gradient[:,1:21] = 0f0 grad[1:end] = vec(gradient) global count; count += 1 println(count, \" \", fval, \" \", norm(grad)) return convert(Float64,fval) end; No. fval norm(gradient) As in our gradient descent and Gauss-Newton example, we define bound constraints for the squared slowness to prevent velocities from becoming negative or too large: # Set up bound constrains v0 = sqrt.(1f0./model0.m) vmin = ones(Float32, model0.n)*1.3f0; vmax = ones(Float32, model0.n)*6.5f0; # Convert to squared slowness mmin = vec((1f0./vmax).^2); mmax = vec((1f0./vmin).^2); The NLopt library offers a range of different optimization algorithms, from which we choose the L-BFGS method. We create an optimization object called opt by specifying the algorithm we want to use and the dimenions of the unknown model vector. We then set the upper and lower bounds of the variable, define f! as the objective function and set the termination criterion to be a maximum of 15 function evaluations: opt = Opt(:LD_LBFGS, prod(model0.n)); lower_bounds!(opt, mmin); upper_bounds!(opt, mmax); min_objective!(opt, f!); maxeval!(opt,15); Remark: Subsampling the number of sources should in practice never be used for second order methods such as L-BFGS. Specialized stochastic second order methods exist, but differ from standard Quasi-Newton methods. We only use source subsampling to reduce the computational cost of our example. Having set up the objective function, bound constraints and termination criterion, we can now run the inversion: This example requires ~200 MB of memory per gradient, i.e. 800 MB with four parallel workers. It runs for approximately 15 minutes. (minf, minx, ret) = optimize(opt, vec(model0.m)); 1 117860.28 130616.90869340736 2 160411.58 311453.8448771197 3 69925.836 89549.46655312144 4 59138.29 139285.26673455827 5 56818.96 136675.77349063082 6 37720.637 109625.42544280257 7 29491.7 82812.97361001468 8 28428.938 66032.27074425873 9 20023.656 56098.345552341074 10 17170.744 50347.75187661317 11 14758.285 54018.45093329857 12 12197.124 49297.37586998672 13 9908.839 36408.764355669744 14 8806.9795 26504.501201566738 15 7206.034 26467.189999004884 We plot the final velocity model after 15 function evaluations: imshow(sqrt.(1f0./reshape(minx, model0.n))', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with L-BFGS\") xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\");","title":"fwi example NLopt"},{"location":"tutorials/fwi_example_NLopt/#fwi-with-quasi-newton-methods-from-the-nlopt-library","text":"In this notebook, we demonstrate how to interface the NLopt optimization library for full-waveform inversion with a limited-memory Quasi-Newton (L-BFGS) algorithm. Once again, we start by adding additional workers for parallel computing and by loading all necessary modules: addprocs(2) using SegyIO, HDF5, PyPlot, JUDI.TimeModeling, NLopt We load the FWI starting model from the HDF5 model file and set up the JUDI model structure: m0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\"); title(\"Starting model\") model0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0); imshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0)); xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\"); Then we read the SEG-Y file containing our test data set. The data was generated with a 2D excerpt from the Overthrust velocity model and consists of 31 shot records with 2 seconds recording time. We load the data and set up a JUDI seismic data vector: block = segy_read(\"overthrust_shot_records.segy\"); d_obs = judiVector(block); Since the SEG-Y file contains the source coordinates, but not the wavelet itself, we create a JUDI Geometry structure for the source and then manually set up an 8 Hz Ricker wavelet. As for the observed data, we set up a JUDI seismic data vector q with the source geometry and wavelet: src_geometry = Geometry(block; key=\"source\"); src_data = ricker_wavelet(src_geometry.t[1], src_geometry.dt[1], 0.008f0); q = judiVector(src_geometry, src_data);","title":"FWI with Quasi-Newton methods from the NLopt library"},{"location":"tutorials/fwi_example_NLopt/#optimization","text":"Rather than implementing the L-BFGS algorithms in Julia ourselves, we interface the NLopt optimization library. This library requires objective functions with the current variable and gradient as input arguments and the function value as the only output argument. For this reason, we build a wrapper that is customized for the NLopt library around our fwi_objective function. The function f! takes a vectorized estimate of the current model as well as the (vectorized) gradient as input arguments. NLopt uses double precision for floating point variables, so the first step inside f! is to reshape and convert the model to single precision. Then we choose a randomized subset of sources and shot records and compute the function value fval and gradient of the FWI objective function. We then set the gradient in the water layer to zero and overwrite the input gradient grad with the new gradient. Furthermore, we keep track of the number of function evaluations through increasing the count variable, which will serve as the termination criterion for the algorithm. In Julia, we set up f! in the following way: batchsize = 8; count = 0; # NLopt objective function println(\"No. \", \"fval \", \"norm(gradient)\"); function f!(x,grad) # Update model model0.m = convert(Array{Float32,2}, reshape(x,model0.n)) # Seclect batch and calculate gradient i = randperm(d_obs.nsrc)[1:batchsize] fval, gradient = fwi_objective(model0, q[i], d_obs[i]) # Reset gradient in water column to zero gradient = reshape(gradient, model0.n); gradient[:,1:21] = 0f0 grad[1:end] = vec(gradient) global count; count += 1 println(count, \" \", fval, \" \", norm(grad)) return convert(Float64,fval) end; No. fval norm(gradient) As in our gradient descent and Gauss-Newton example, we define bound constraints for the squared slowness to prevent velocities from becoming negative or too large: # Set up bound constrains v0 = sqrt.(1f0./model0.m) vmin = ones(Float32, model0.n)*1.3f0; vmax = ones(Float32, model0.n)*6.5f0; # Convert to squared slowness mmin = vec((1f0./vmax).^2); mmax = vec((1f0./vmin).^2); The NLopt library offers a range of different optimization algorithms, from which we choose the L-BFGS method. We create an optimization object called opt by specifying the algorithm we want to use and the dimenions of the unknown model vector. We then set the upper and lower bounds of the variable, define f! as the objective function and set the termination criterion to be a maximum of 15 function evaluations: opt = Opt(:LD_LBFGS, prod(model0.n)); lower_bounds!(opt, mmin); upper_bounds!(opt, mmax); min_objective!(opt, f!); maxeval!(opt,15); Remark: Subsampling the number of sources should in practice never be used for second order methods such as L-BFGS. Specialized stochastic second order methods exist, but differ from standard Quasi-Newton methods. We only use source subsampling to reduce the computational cost of our example. Having set up the objective function, bound constraints and termination criterion, we can now run the inversion: This example requires ~200 MB of memory per gradient, i.e. 800 MB with four parallel workers. It runs for approximately 15 minutes. (minf, minx, ret) = optimize(opt, vec(model0.m)); 1 117860.28 130616.90869340736 2 160411.58 311453.8448771197 3 69925.836 89549.46655312144 4 59138.29 139285.26673455827 5 56818.96 136675.77349063082 6 37720.637 109625.42544280257 7 29491.7 82812.97361001468 8 28428.938 66032.27074425873 9 20023.656 56098.345552341074 10 17170.744 50347.75187661317 11 14758.285 54018.45093329857 12 12197.124 49297.37586998672 13 9908.839 36408.764355669744 14 8806.9795 26504.501201566738 15 7206.034 26467.189999004884 We plot the final velocity model after 15 function evaluations: imshow(sqrt.(1f0./reshape(minx, model0.n))', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4); title(\"FWI with L-BFGS\") xlabel(\"Lateral position [km]\"); ylabel(\"Depth [km]\");","title":"Optimization"},{"location":"tutorials/judi_leading_edge_tutorial/","text":"Installing Devito (do not include in manuscipt) This tutorial and the coming second part are based on Devito version 3.1.0. It requires the installation of the full software with examples, not only the code generation API. To install: git clone -b v3.1.0 https://github.com/opesci/devito cd devito conda env create -f environment.yml source activate devito pip install -e . That final dot is important, don't miss it out! Installing Julia Users need to install Julia, then the [JUDI] software package v1.0, [JOLI](https://github.com/slimgroup/JOLI.jl), and [SeisIO]. These packages can be downloaded using the Julia package manager. First install Julia 0.6, then start the Julia terminal and do this: ENV[\"PYTHON\"] = \" < PATH TO YOUR ENVS >/devito/bin/python\" # e.g. ~/anaconda/envs Pkg.add(\"IJulia\") Pkg.add(\"HDF5\") Pkg.add(\"PyCall\") Pkg.clone(\"https://github.com/slimgroup/SeisIO.jl.git\") Pkg.clone(\"https://github.com/slimgroup/JOLI.jl.git\") Pkg.clone(\"https://github.com/slimgroup/JUDI.jl.git\") Pkg.checkout(\"JUDI\",\"tle_tutorial_jan_2018\") Useful links Devito documentation Devito source code and examples Tutorial notebooks with latest Devito/master Geophysics tutorial Full-Waveform Inversion - Part 3: optimization Philipp Witte 1 *, Mathias Louboutin 1 , Keegan Lensink 1 , Michael Lange 2 , Navjot Kukreja 2 , Fabio Luporini 2 , Gerard Gorman 2 , and Felix J. Herrmann 1,3 1 Seismic Laboratory for Imaging and Modeling (SLIM), The University of British Columbia 2 Imperial College London, London, UK 3 now at Georgia Institute of Technology, USA Corresponding author: pwitte@eoas.ubc.ca Introduction This tutorial is the third part of a full-waveform inversion (FWI) tutorial series with a step-by-step walkthrough of setting up forward and adjoint wave equations and building a basic FWI inversion framework. For discretizing and solving wave equations, we use Devito , a Python-based domain-specific language for automated generation of finite-difference code (Lange et al., 2016). The first two parts of this tutorial (Louboutin et al., 2017, 2018) demonstrated how to solve the acoustic wave equation for modeling seismic shot records and how to compute the gradient of the FWI objective function using the adjoint-state method. With these two key ingredients, we will now build an inversion framework that can be used to minimize the FWI least-squares objective function. FWI is a computationally and mathematically challenging problem. The computational complexity comes from the fact that an already expensive solution procedure for the wave equation needs to be repeated for a large number of source positions for each iteration of the optimization algorithm. The mathematical complexity comes from the fact that the FWI objective is known to have many local minima due to cycle skipping. NOT FOR MANUSCRIPT Furthermore, since the solution is not unique it is generally not possible to unambiguously recover the parameterization of the subsurface from the given data alone, making FWI an active field of research (e.g. Leeuwen et al., 2013; Warner and Guasch, 2014; Peters and Herrmann, 2017). This tutorial demonstrates how we can set up a basic FWI framework with two alternative gradient-based optimization algorithms: stochastic gradient descent, and the Gauss\u2013Newton method (Nocedal and Wright, 2009). We implement our inversion framework with the Julia Devito Inversion framework (JUDI), a parallel software package for seismic modeling and inversion in the Julia programming language. JUDI provides abstractions and function wrappers that allow the implementation of wave-equation-based inversion problems such as FWI using code that closely follows the mathematical notation, while using Devito\u2019s automatic code generation for solving the underlying wave equations. All the code to run the algorithms and generate the figures in this paper can be found at http://github.com/SEG. Optimizing the FWI objective function The goal of this tutorial series is to optimize the FWI objective function with the $\\ell_2$-misfit: $$ \\mathop{\\hbox{minimize}} {\\mathbf{m}} \\hspace{.2cm} f(\\mathbf{m})= \\sum {i=1}^{n_s} \\frac{1}{2} \\left\\lVert \\mathbf{d}^\\mathrm{pred}_i (\\mathbf{m}, \\mathbf{q}_i) - \\mathbf{d}_i^\\mathrm{obs} \\right\\rVert_2^2, $$ where $\\mathbf{d}^\\mathrm{pred}_i$ and $\\mathbf{d}^\\mathrm{obs}_i$ are the predicted and observed seismic shot records of the $i^{\\text{th}}$ source location and $\\mathbf{m}$ is the velocity model (expressed as squared slowness). In part one, we demonstrated how to implement a forward modeling operator to generate the predicted shot records, which we will denote as $\\mathbf{d}^\\mathrm{pred}_i = \\mathbf{F}(\\mathbf{m},\\mathbf{q}_i)$. In the second tutorial, we then showed how we can compute the gradient $\\nabla f(\\mathbf{m})$ of the objective function and update our initial model using gradient descent. There is a snag, however. This first-order optimization algorithm has a linear convergence rate at best, and typically requires many iterations to converge. Second-order optimization methods converge considerably faster. To implement them, we first approximate the objective with a second-order Taylor expansion: $$ f(\\mathbf{m}) = f(\\mathbf{m}_0) + \\nabla f(\\mathbf{m}_0) \\delta \\mathbf{m} + \\delta \\mathbf{m}^\\top \\nabla^2 f(\\mathbf{m}_0) \\delta \\mathbf{m} + \\mathcal{O}(\\delta \\mathbf{m}^3), $$ where $\\mathcal{O}(\\delta \\mathbf{m}^3)$ represents the error term, $\\nabla f(\\mathbf{m}_0)$ is the gradient as implemented in part two, and $\\nabla^2 f(\\mathbf{m}_0)$ is the Hessian of the objective function, which we will refer to as $\\mathbf{H}$. Rather than using the negative gradient to incrementally update our model, as in gradient descent, we directly calculate a model update $\\delta \\mathbf{m}$ that leads us to the minimum. This is called Newton's method: $$ \\delta \\mathbf{m} = - \\mathbf{H}(\\mathbf{m}_0)^{-1} \\nabla f(\\mathbf{m}_0). $$ Although the method converges to the minimum of the FWI objective function quickly, it comes at the cost of having to compute and invert the Hessian matrix (Nocedal and Wright, 2009). Fortunately, for least squares problems, such as FWI, the Hessian can be approximated by the Gauss-Newton (GN) Hessian $\\mathbf{J}^\\top \\mathbf{J}$, where $\\mathbf{J}$ is the Jacobian matrix. This is the partial derivative of the forward modeling operator $\\mathbf{F}(\\mathbf{m},\\mathbf{q})$ with respect to $\\mathbf{m}$ \u2014 something we can easily compute. Furthermore, the Jacobian can also be used to express the gradient of the FWI objective function as $\\nabla f(\\mathbf{m} 0) = \\mathbf{J}^\\top (\\mathbf{d}^\\mathrm{pred}_i - \\mathbf{d}_i^\\mathrm{obs})$, where $\\mathbf{J}^\\top$ is the adjoint (transposed) Jacobian. This is useful, because we now have a set of operators $\\mathbf{F}, \\mathbf{J}$ and $\\mathbf{H} {GN}=\\mathbf{J}^\\top\\mathbf{J}$, through which we can express both first and second order optimization algorithms for FWI. Although forming these matrices explicitly is not possible, since they can become extremely large, we only need the action of these operators on vectors. This allows us to implement these operators matrix-free. In the following section we will demonstrate how to set up these operators in our JUDI software framework and to how to use them to implement FWI algorithms. NOT FOR MANUSCRIPT [SeisIO]:https://github.com/slimgroup/SeisIO.jl The Julia Devito Inversion framework is a parallel matrix-free linear operator library for seismic modeling and inversion based on Devito and [SeisIO], a performant Julia package for reading and writing large data volumes in SEG-Y format. JUDI allows implementing seismic inversion algorithms as linear algebra operations, enabling rapid translations of FWI algorithms to executable Julia code. The underlying wave equations are set up and solved using Devito, as described in the first two tutorials, and are interfaced from Julia using the [PyCall](https://github.com/JuliaPy/PyCall.jl) package (Johnson, 2017). For reading and writing SEG-Y data, JUDI uses the SeisIO package, a sophisticated SEG-Y reader that allows us to scan large 3D data sets for creating look-up tables with header summaries. However, since our data set is relatively small, we will directly load the full file into memory. The `segy_read` command takes the file name as an input and returns a dense data block. This is our observed data and we store it as a JUDI vector. # NOT FOR MANUSCRIPT addprocs(4); # NOT FOR MANUSCRIPT using SeisIO using JUDI.TimeModeling, JUDI.SLIM_optim Implementing FWI in JUDI We start our demonstration by reading our data set, which consists of 16 shot records and was generated with an excerpt from the SEG/EAGE Overthrust model (Aminzadeh et al. 1997). We store it as a judiVector : block = segy_read(\"overthrust_shot_records.segy\") d_obs = judiVector(block); \u001b[1m\u001b[33mWARNING: \u001b[39m\u001b[22m\u001b[33mFixed length trace flag set in stream: IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=7076688, maxsize=Inf, ptr=3601, mark=-1)\u001b[39m # NOT FOR MANUSCRIPT using PyPlot i = 8 figure(figsize=(15,6)) imshow(d_obs.data[i], cmap=\"seismic\", extent=[0,size(d_obs.data[i],2),2,0], aspect=0.3, vmin=-3, vmax=3) ax1 = gca(); ax1[:set_aspect](\"auto\") xlabel(\"Receiver number\", size=12) ylabel(\"Time [s]\", size=12) text(3, 0.13, \"Shot record $i\", size=16) colorbar() savefig(\"../Figures/Figure_1.png\", dpi=300) show() Figure 1 : Observed shot record number 8. JUDI vectors such as d_obs can be used like a regular Julia vectors, so we can compute norms via norm(d_obs) or the inner product via dot(d_obs, d_obs) , but they contain the shot records in their original dimension. Shot records can be accessed via their respective shot number with d_obs.data[shot_no] , while the header information can be accessed with d_obs.geometry . We extract the source geometry from our SEG-Y file and then manually set up a source vector q with an 8 Hz Ricker wavelet: f = 0.008 # kHz src_geom = Geometry(block; key=\"source\") src_data = ricker_wavelet(src_geom.t[1], src_geom.dt[1], f) q = judiVector(src_geom, src_data); # NOT FOR MANUSCRIPT plot(q.data[1]) show() NOT FOR MANUSCRIPT Since our data set consists of $16$ shot records, both `d_obs` and `q` contain the data and geometries for all source positions. We can check the number of source positions with `d_obs.nsrc` and `q.nsrc` and we can extract the part of the vector that corresponds to one or multiple shots with `d_obs[shot_no], q[shot_no]`. We will now set up the forward modeling operator $\\mathbf{F}(\\mathbf{m},\\mathbf{q})$ as a matrix-free operator for the inverse wave equation $\\mathbf{A}(\\mathbf{m})^{-1}$, where $\\mathbf{m}$ is the current model, and source/receiver injection and sampling operators $\\mathbf{P} \\mathrm{s}$ and $\\mathbf{P} \\mathrm{r}$. Since the dimensions of the inverse wave equation operator depend on the number of computational time steps, we calculate this number using the get_computational_nt function and set up an info object that contains some dimensionality information required by all operators. Then we can define Pr and Ps as matrix-free operators implementing Devito sparse point injection and interpolation (Louboutin et al., 2017). Multiplications with Ps and Pr represent sampling the wavefield at source/receiver locations, while their adjoints Ps', Pr' denote injecting either source wavelets or shot records into the computational grid. These projection and modelling operators can then be set up in Julia in the following way: # NOT FOR MANUSCRIPT using HDF5 m0, n, d, o = read(h5open(\"overthrust_model.h5\",\"r\"),\"m0\",\"n\",\"d\",\"o\") model0 = Model((n[1],n[2]), (d[1],d[2]), (o[1],o[2]), m0); ntComp = get_computational_nt(q.geometry, d_obs.geometry, model0) info = Info(prod(model0.n), d_obs.nsrc, ntComp) Pr = judiProjection(info, d_obs.geometry) Ps = judiProjection(info, q.geometry) Ainv = judiModeling(info, model0); The forward modeling step can be expressed mathematically as $$ F(\\mathbf{m};\\mathbf{q})=\\mathbf{P}_r\\mathbf{A}^{-1}(\\mathbf{m})\\mathbf{P}_s^\\top\\mathbf{q} $$ which is expressed in Julia as d_pred = Pr * Ainv * Ps' * q This forward models all 16 predicted shot records in parallel. Notice that, in instantiating Ainv , we made the wave equation solver implicitly dependent on model0 . Finally, we set up the matrix-free Jacobian operator J and the Gauss\u2013Newton Hessian J' * J . As mentioned in the introduction, J is the partial derivative of the forward modeling operator $\\mathbf{F}(\\mathbf{m}, \\mathbf{q})$ with respect to the model m and is therefore directly constructed from our modeling operator Pr * Ainv * Ps' and a specified source vector q : J = judiJacobian(Pr * Ainv * Ps', q); NOT FOR MANUSCRIPT Note that, if we started our Julia session with multiple CPU cores or nodes (`julia -p n`, with `n` being the number of workers), the wave equation solves are automatically parallelized over source locations and all shots are collected in the `d_pred` vector. We can also model a single or subset of shots by indexing the operators with the respective shot numbers. E.g. if we want to model the first two shots, we define `i=[1,2]` and then run `d_sub = Pr[i]*Ainv[i]*Ps[i]'*q[i]`. The FWI gradient would then be given by: `g = J[i]' * (d_pred - d_obs[i])` If we want to solve an adjoint wave equation with the observed data as the adjoint source and restrictions of the wavefields back to the source locations, we can simply run `qad = Ps * Ainv' * Pr' * d_obs`, exemplifying the advantages of casting FWI in a proper computational linear algebra framework. Once we have `J` we can also form the Gauss\u2013Newton Hessian: `H_GN = J' * J` In the context of seismic inversion, the Jacobian is also called the linearized modeling or demigration operator and its adjoint J' is the migration operator. One drawback of this notation is that the forward wavefields for the gradient calculation have to be recomputed, since the forward modeling operator only returns the shot records and not the complete wavefields. For this reason, JUDI has an additional function for computing the gradients of the FWI objective function f,g = fwi_objective(model0,q[i],d_obs[i]) , which takes the current model, source and data vectors as an input and computes the objective value and gradient in parallel without having to recompute the forward wavefields. FWI via gradient descent With expressions for modeling operators, Jacobians and gradients of the FWI objective, we can now implement different FWI algorithms in a few lines of code. We will start with a basic gradient descent example with a line search. To reduce the computational cost of full gradient descent, we will use a stochastic approach in which we only compute the gradient and function value for a randomized subset of source locations. In JUDI, this is accomplished by choosing a random vector of integers between 1 and 16 and indexing the data vectors as described earlier. Furthermore, we will apply a projection operator proj(x) , which prevent velocities (or squared slownesses) becoming negative or too large by clipping values outside the allowed range. A few extra variables are defined in the notebook, but the full algorithm for FWI with stochastic gradient descent and box constraints is implemented as follows: # NOT FOR MANUSCRIPT # Set up bound constraints. v0 = sqrt.(1f0./model0.m) vmin = ones(Float32, model0.n)*1.3f0 vmax = ones(Float32, model0.n)*6.5f0 # Fix water column. vmin[:,1:21] = v0[:,1:21] vmax[:,1:21] = v0[:,1:21] # Convert to squared slowness. mmin = vec((1f0./vmax).^2) mmax = vec((1f0./vmin).^2); # NOT FOR MANUSCRIPT maxiter = 10 batchsize = 8 # Number of shots for each iteration. proj(x) = reshape(median([vec(mmin) vec(x) vec(mmax)], 2), model0.n) fhistory_SGD = zeros(Float32, maxiter); for j=1:maxiter # FWI objective function value and gradient. i = randperm(d_obs.nsrc)[1:batchsize] fval, grad = fwi_objective(model0, q[i], d_obs[i]) fhistory_SGD[j] = fval # OMIT LINE FROM MANUSCRIPT # Line search and update model. update = backtracking_linesearch(model0, q[i], d_obs[i], fval, grad, proj; alpha=1f0) model0.m += reshape(update, model0.n) # Apply box constraints. model0.m = proj(model0.m) end # NOT FOR MANUSCRIPT model_SGD = copy(model0.m); JUDI's backtracking_linesearch function performs an approximate line search and returns a model update that leads to a decrease of the objective function value (Armijo condition; Nocedal and Wright, 2009). The result after 10 iterations of SGD with box constraints is shown in Figure 2. In practice, where starting models are typically less accurate than in our example, FWI is often performed from low to high frequencies, since the objective function has less local minima for lower frequencies (Bunks et al., 1995). In this multi-scale FWI approach, a low-pass filtered version of the data is used to invert for a low resolution velocity model first and higher frequencies are added in subsequent iterations. FWI via the Gauss\u2013Newton method As discussed earlier, the convergence rate of GD depends on the objective function, but requires many FWI iterations necessary to reach an acceptable solution. Using our matrix-free operator for the Jacobian J, we can modify the above code to implement the Gauss\u2013Newton method (Equation 3) to improve the convergence rate. In practice, directly inverting the Gauss\u2013Newton Hessian J'* J should be avoided, because the matrix is badly conditioned and takes many iterations to invert. Instead, we perform a few iterations of a least-squares solver, lsqr() , to approximately solve J * p = d_pred - d_obs and obtain the update direction p . lsqr , from the Julia IterativeSolvers package, is a conjugate-gradient type algorithm for solving least squares problems and is mathematically equivalent to inverting J' * J , but has better numerical properties (Paige and Saunders, 1982). We implement the Gauss-Newton method as follows: # NOT FOR MANUSCRIPT model0.m = m0 # Reset velocity model. fhistory_GN = zeros(Float32,maxiter); using IterativeSolvers DO NOT RUN BY ACCIDENT # OMIT LINE FROM MANUSCRIPT for j=1:maxiter # Model predicted data. d_pred = Pr * Ainv * Ps' * q # GN update direction. p = lsqr(J, d_pred - d_obs; maxiter=6) fhistory_GN[j] = .5f0 * norm(d_pred - d_obs)^2 # OMIT LINE FROM MANUSCRIPT # update model and box constraints. model0.m = model0.m - reshape(p, model0.n) end NOT FOR MANUSCRIPT An important benefit of matrix-free operators is that we do not need to implement our own least-squares solver, but can pass `J` and the data residual `d_pred - d_obs` to a third-party optimization library. The operator `J` does not need to be an explicit matrix, since `lsqr` only uses matrix-vector products. In contrast to our SGD algorithm, we use all shot records in every iteration, since stochastic methods for second order algorithms are less well understood, making this approach considerably more expensive than our previous algorithm. However, as shown in figures 2 and 3, it achieves a superior result, with a considerably lower misfit compared to the known model. Furthermore, figure 3 shows that it achieves the improved result in relatively few iterations. # NOT FOR MANUSCRIPT figure(figsize=(15, 12)) subplot(311) imshow(sqrt.(1f0./m0)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4) text(0.15, 0.3, \"Starting model\", size=14, color=\"black\") ylabel(\"Depth [km]\", size=12) colorbar() text(10.35, 1.5, \"Velocity [km/s]\", va=\"center\", size=12, rotation=90) subplot(312) imshow(sqrt.(1f0./model_SGD)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4) misfit = round(fhistory_SGD[end], 3) text(0.15, 0.3, \"Gradient descent, misfit = $misfit\", size=14, color=\"black\") ylabel(\"Depth [km]\", size=12) colorbar() text(10.35, 1.5, \"Velocity [km/s]\", va=\"center\", size=12, rotation=90) subplot(313) imshow(sqrt.(1f0./model0.m)', cmap=\"GnBu\", extent=(0,10,3,0), vmin=1.5, vmax=5.4) misfit = round(fhistory_GN[end], 3) text(0.15, 0.3, \"Gauss\u2013Newton, misfit = $misfit\", size=14, color=\"black\") xlabel(\"Lateral position [km]\", size=12) ylabel(\"Depth [km]\", size=12) colorbar() text(10.35, 1.5, \"Velocity [km/s]\", va=\"center\", size=12, rotation=90) savefig(\"../Figures/Figure_2.png\", dpi=300) show() Figure 2 : (a) Initial model. (b) Recovered velocity model after 10 iterations of stochastic gradient descent with box constraints and a batch size of 8 shots. (c) Recovered velocity model after 10 iterations of the Gauss\u2013Newton method, with 6 iterations of LSQR for the Gauss\u2013Newton subproblem, and using all shots in every iteration. The resulting misfit is substantially lower that what was achieved with gradient descent. # NOT FOR MANUSCRIPT fhistory_SGD = fhistory_SGD/norm(fhistory_SGD, Inf) fhistory_GN = fhistory_GN/norm(fhistory_GN, Inf); # NOT FOR MANUSCRIPT figure(figsize=(8,3)) plot(1:10, fhistory_SGD, label=\"Gradient descent\") plot(1:10, fhistory_GN, label=\"Gauss\u2013Newton\") text(9.8, 0.28, \"Gradient descent\", ha=\"right\", color=\"steelblue\") text(9.8, 0.09, \"Gauss\u2013Newton\", ha=\"right\", color=\"chocolate\") xlabel(\"Iteration number\", size=12) ylabel(\"Misfit\", size=12) xlim(1, 10) savefig(\"../Figures/Figure_3.png\", dpi=300) show() Figure 3 : Normalized function values for the FWI inversion example with stochastic gradient descent and the Gauss-Newton method. An alternative to (Gauss\u2013)Newton methods are quasi-Newton methods, which build up an approximation of the Hessian from previous gradients only and require no additional PDE solves or matrix inversions. Implementing an efficient and correct version of this method, such as the L-BFGS algorithm, exceeds a few lines of code and we therefore leave this exercise to the reader. Instead of implementing more complicated algorithms by hand, it is also possible to interface third-party Julia optimization libraries and an example for this is given in the notebook fwi_example_NLopt.ipynb . Even though all examples shown here are two-dimensional, in order to make them reproducible on a laptop or desktop PC, JUDI can be used for 3D modeling and inversion without having to change the code, since the number of dimensions are automatically inferred from the velocity model and data dimensions. Conclusions In this final part of our FWI tutorial series, we demonstrated how to set up basic optimization algorithms for waveform inversion using JUDI. The methods shown here are all gradient based and differ in the way how update directions for the velocity model are computed. Our numerical examples can serve for the reader as a basis for developing more advanced FWI workflows, which usually include additional data preprocessing, frequency continuation techniques or further model constraints. Acknowledgments This research was carried out as part of the SINBAD II project with the support of the member organizations of the SINBAD Consortium. This work was financially supported in part by EPSRC grant EP/L000407/1 and the Imperial College London Intel Parallel Computing Centre. References Aminzadeh, F., Brac, J., and Kunz, T., 1997. 3D Salt and Overthrust models. SEG/EAGE Modeling Series, No. 1: Distribution CD of Salt and Overthrust models, SEG Book Series Tulsa, Oklahoma. Bezanson, J., Karpinski, S., Shah, V. B., and Edelman, A., 2012, Julia: A fast dynamic language for technical computing: CoRR. Retrieved from http://arxiv.org/abs/1209.5145 Bunks, C., Saleck, F. M., Zaleski, S., and Chavent, G., 1995, Multiscale seismic waveform inversion: GEOPHYSICS, 60, 1457\u20131473. doi:10.1190/1.1443880 Johnson, S., 2017, Calling python functions from the julia language: GitHub repository. https://github.com/JuliaPy/PyCall.jl; GitHub. Lange, M., Kukreja, N., Louboutin, M., Luporini, F., Zacarias, F. V., Pandolfo, V., \u2026 Gorman, G., 2016, Devito: Towards a generic finite difference DSL using symbolic python: 6th workshop on python for high-performance and scientific computing. doi:10.1109/PyHPC.2016.9 Leeuwen, T. van, Aravkin, A. Y., Calandra, H., and Herrmann, F. J., 2013, In which domain should we measure the misfit for robust full waveform inversion? EAGE annual conference proceedings. doi:10.3997/2214-4609.20130839 Louboutin, M., Witte, P. A., Lange, M., Kukreja, N., Luporini, F., Gorman, G., and Herrmann, F. J., 2017, Full-waveform inversion - part 1: Forward modeling: Retrieved from https://www.slim.eos.ubc.ca/Publications/Private/Submitted/2017/louboutin2017fwi/louboutin2017fwi.html Louboutin, M., Witte, P. A., Lange, M., Kukreja, N., Luporini, F., Gorman, G., and Herrmann, F. J., 2018, Full-waveform inversion - part 2: Adjoint modeling: Nocedal, J., and Wright, S., 2009, Numerical optimization: (2nd ed.). Springer. Paige, C. C., and Saunders, M. A., 1982, LSQR: An algorithm for sparse linear equations and sparse least squares: ACM Trans. Math. Softw., 8, 43\u201371. doi:10.1145/355984.355989 Peters, B., and Herrmann, F. J., 2017, Constraints versus penalties for edge-preserving full-waveform inversion: The Leading Edge, 36, 94\u2013100. doi:10.1190/tle36010094.1 Warner, M., and Guasch, L., 2014, Adaptive waveform inversion: Theory: In SEG technical program expanded abstracts 2014 (pp. 1089\u20131093). doi:10.1190/segam2014-0371.1","title":"Judi leading edge tutorial"},{"location":"tutorials/judi_leading_edge_tutorial/#geophysics-tutorial","text":"","title":"Geophysics tutorial"},{"location":"tutorials/judi_leading_edge_tutorial/#full-waveform-inversion-part-3-optimization","text":"Philipp Witte 1 *, Mathias Louboutin 1 , Keegan Lensink 1 , Michael Lange 2 , Navjot Kukreja 2 , Fabio Luporini 2 , Gerard Gorman 2 , and Felix J. Herrmann 1,3 1 Seismic Laboratory for Imaging and Modeling (SLIM), The University of British Columbia 2 Imperial College London, London, UK 3 now at Georgia Institute of Technology, USA Corresponding author: pwitte@eoas.ubc.ca","title":"Full-Waveform Inversion - Part 3: optimization"},{"location":"tutorials/judi_leading_edge_tutorial/#introduction","text":"This tutorial is the third part of a full-waveform inversion (FWI) tutorial series with a step-by-step walkthrough of setting up forward and adjoint wave equations and building a basic FWI inversion framework. For discretizing and solving wave equations, we use Devito , a Python-based domain-specific language for automated generation of finite-difference code (Lange et al., 2016). The first two parts of this tutorial (Louboutin et al., 2017, 2018) demonstrated how to solve the acoustic wave equation for modeling seismic shot records and how to compute the gradient of the FWI objective function using the adjoint-state method. With these two key ingredients, we will now build an inversion framework that can be used to minimize the FWI least-squares objective function. FWI is a computationally and mathematically challenging problem. The computational complexity comes from the fact that an already expensive solution procedure for the wave equation needs to be repeated for a large number of source positions for each iteration of the optimization algorithm. The mathematical complexity comes from the fact that the FWI objective is known to have many local minima due to cycle skipping.","title":"Introduction"},{"location":"tutorials/judi_leading_edge_tutorial/#optimizing-the-fwi-objective-function","text":"The goal of this tutorial series is to optimize the FWI objective function with the $\\ell_2$-misfit: $$ \\mathop{\\hbox{minimize}} {\\mathbf{m}} \\hspace{.2cm} f(\\mathbf{m})= \\sum {i=1}^{n_s} \\frac{1}{2} \\left\\lVert \\mathbf{d}^\\mathrm{pred}_i (\\mathbf{m}, \\mathbf{q}_i) - \\mathbf{d}_i^\\mathrm{obs} \\right\\rVert_2^2, $$ where $\\mathbf{d}^\\mathrm{pred}_i$ and $\\mathbf{d}^\\mathrm{obs}_i$ are the predicted and observed seismic shot records of the $i^{\\text{th}}$ source location and $\\mathbf{m}$ is the velocity model (expressed as squared slowness). In part one, we demonstrated how to implement a forward modeling operator to generate the predicted shot records, which we will denote as $\\mathbf{d}^\\mathrm{pred}_i = \\mathbf{F}(\\mathbf{m},\\mathbf{q}_i)$. In the second tutorial, we then showed how we can compute the gradient $\\nabla f(\\mathbf{m})$ of the objective function and update our initial model using gradient descent. There is a snag, however. This first-order optimization algorithm has a linear convergence rate at best, and typically requires many iterations to converge. Second-order optimization methods converge considerably faster. To implement them, we first approximate the objective with a second-order Taylor expansion: $$ f(\\mathbf{m}) = f(\\mathbf{m}_0) + \\nabla f(\\mathbf{m}_0) \\delta \\mathbf{m} + \\delta \\mathbf{m}^\\top \\nabla^2 f(\\mathbf{m}_0) \\delta \\mathbf{m} + \\mathcal{O}(\\delta \\mathbf{m}^3), $$ where $\\mathcal{O}(\\delta \\mathbf{m}^3)$ represents the error term, $\\nabla f(\\mathbf{m}_0)$ is the gradient as implemented in part two, and $\\nabla^2 f(\\mathbf{m}_0)$ is the Hessian of the objective function, which we will refer to as $\\mathbf{H}$. Rather than using the negative gradient to incrementally update our model, as in gradient descent, we directly calculate a model update $\\delta \\mathbf{m}$ that leads us to the minimum. This is called Newton's method: $$ \\delta \\mathbf{m} = - \\mathbf{H}(\\mathbf{m}_0)^{-1} \\nabla f(\\mathbf{m}_0). $$ Although the method converges to the minimum of the FWI objective function quickly, it comes at the cost of having to compute and invert the Hessian matrix (Nocedal and Wright, 2009). Fortunately, for least squares problems, such as FWI, the Hessian can be approximated by the Gauss-Newton (GN) Hessian $\\mathbf{J}^\\top \\mathbf{J}$, where $\\mathbf{J}$ is the Jacobian matrix. This is the partial derivative of the forward modeling operator $\\mathbf{F}(\\mathbf{m},\\mathbf{q})$ with respect to $\\mathbf{m}$ \u2014 something we can easily compute. Furthermore, the Jacobian can also be used to express the gradient of the FWI objective function as $\\nabla f(\\mathbf{m} 0) = \\mathbf{J}^\\top (\\mathbf{d}^\\mathrm{pred}_i - \\mathbf{d}_i^\\mathrm{obs})$, where $\\mathbf{J}^\\top$ is the adjoint (transposed) Jacobian. This is useful, because we now have a set of operators $\\mathbf{F}, \\mathbf{J}$ and $\\mathbf{H} {GN}=\\mathbf{J}^\\top\\mathbf{J}$, through which we can express both first and second order optimization algorithms for FWI. Although forming these matrices explicitly is not possible, since they can become extremely large, we only need the action of these operators on vectors. This allows us to implement these operators matrix-free. In the following section we will demonstrate how to set up these operators in our JUDI software framework and to how to use them to implement FWI algorithms.","title":"Optimizing the FWI objective function"},{"location":"tutorials/judi_leading_edge_tutorial/#implementing-fwi-in-judi","text":"We start our demonstration by reading our data set, which consists of 16 shot records and was generated with an excerpt from the SEG/EAGE Overthrust model (Aminzadeh et al. 1997). We store it as a judiVector : block = segy_read(\"overthrust_shot_records.segy\") d_obs = judiVector(block); \u001b[1m\u001b[33mWARNING: \u001b[39m\u001b[22m\u001b[33mFixed length trace flag set in stream: IOBuffer(data=UInt8[...], readable=true, writable=false, seekable=true, append=false, size=7076688, maxsize=Inf, ptr=3601, mark=-1)\u001b[39m # NOT FOR MANUSCRIPT using PyPlot i = 8 figure(figsize=(15,6)) imshow(d_obs.data[i], cmap=\"seismic\", extent=[0,size(d_obs.data[i],2),2,0], aspect=0.3, vmin=-3, vmax=3) ax1 = gca(); ax1[:set_aspect](\"auto\") xlabel(\"Receiver number\", size=12) ylabel(\"Time [s]\", size=12) text(3, 0.13, \"Shot record $i\", size=16) colorbar() savefig(\"../Figures/Figure_1.png\", dpi=300) show() Figure 1 : Observed shot record number 8. JUDI vectors such as d_obs can be used like a regular Julia vectors, so we can compute norms via norm(d_obs) or the inner product via dot(d_obs, d_obs) , but they contain the shot records in their original dimension. Shot records can be accessed via their respective shot number with d_obs.data[shot_no] , while the header information can be accessed with d_obs.geometry . We extract the source geometry from our SEG-Y file and then manually set up a source vector q with an 8 Hz Ricker wavelet: f = 0.008 # kHz src_geom = Geometry(block; key=\"source\") src_data = ricker_wavelet(src_geom.t[1], src_geom.dt[1], f) q = judiVector(src_geom, src_data); # NOT FOR MANUSCRIPT plot(q.data[1]) show()","title":"Implementing FWI in JUDI"},{"location":"tutorials/judi_leading_edge_tutorial/#fwi-via-gradient-descent","text":"With expressions for modeling operators, Jacobians and gradients of the FWI objective, we can now implement different FWI algorithms in a few lines of code. We will start with a basic gradient descent example with a line search. To reduce the computational cost of full gradient descent, we will use a stochastic approach in which we only compute the gradient and function value for a randomized subset of source locations. In JUDI, this is accomplished by choosing a random vector of integers between 1 and 16 and indexing the data vectors as described earlier. Furthermore, we will apply a projection operator proj(x) , which prevent velocities (or squared slownesses) becoming negative or too large by clipping values outside the allowed range. A few extra variables are defined in the notebook, but the full algorithm for FWI with stochastic gradient descent and box constraints is implemented as follows: # NOT FOR MANUSCRIPT # Set up bound constraints. v0 = sqrt.(1f0./model0.m) vmin = ones(Float32, model0.n)*1.3f0 vmax = ones(Float32, model0.n)*6.5f0 # Fix water column. vmin[:,1:21] = v0[:,1:21] vmax[:,1:21] = v0[:,1:21] # Convert to squared slowness. mmin = vec((1f0./vmax).^2) mmax = vec((1f0./vmin).^2); # NOT FOR MANUSCRIPT maxiter = 10 batchsize = 8 # Number of shots for each iteration. proj(x) = reshape(median([vec(mmin) vec(x) vec(mmax)], 2), model0.n) fhistory_SGD = zeros(Float32, maxiter); for j=1:maxiter # FWI objective function value and gradient. i = randperm(d_obs.nsrc)[1:batchsize] fval, grad = fwi_objective(model0, q[i], d_obs[i]) fhistory_SGD[j] = fval # OMIT LINE FROM MANUSCRIPT # Line search and update model. update = backtracking_linesearch(model0, q[i], d_obs[i], fval, grad, proj; alpha=1f0) model0.m += reshape(update, model0.n) # Apply box constraints. model0.m = proj(model0.m) end # NOT FOR MANUSCRIPT model_SGD = copy(model0.m); JUDI's backtracking_linesearch function performs an approximate line search and returns a model update that leads to a decrease of the objective function value (Armijo condition; Nocedal and Wright, 2009). The result after 10 iterations of SGD with box constraints is shown in Figure 2. In practice, where starting models are typically less accurate than in our example, FWI is often performed from low to high frequencies, since the objective function has less local minima for lower frequencies (Bunks et al., 1995). In this multi-scale FWI approach, a low-pass filtered version of the data is used to invert for a low resolution velocity model first and higher frequencies are added in subsequent iterations.","title":"FWI via gradient descent"},{"location":"tutorials/judi_leading_edge_tutorial/#fwi-via-the-gaussnewton-method","text":"As discussed earlier, the convergence rate of GD depends on the objective function, but requires many FWI iterations necessary to reach an acceptable solution. Using our matrix-free operator for the Jacobian J, we can modify the above code to implement the Gauss\u2013Newton method (Equation 3) to improve the convergence rate. In practice, directly inverting the Gauss\u2013Newton Hessian J'* J should be avoided, because the matrix is badly conditioned and takes many iterations to invert. Instead, we perform a few iterations of a least-squares solver, lsqr() , to approximately solve J * p = d_pred - d_obs and obtain the update direction p . lsqr , from the Julia IterativeSolvers package, is a conjugate-gradient type algorithm for solving least squares problems and is mathematically equivalent to inverting J' * J , but has better numerical properties (Paige and Saunders, 1982). We implement the Gauss-Newton method as follows: # NOT FOR MANUSCRIPT model0.m = m0 # Reset velocity model. fhistory_GN = zeros(Float32,maxiter); using IterativeSolvers DO NOT RUN BY ACCIDENT # OMIT LINE FROM MANUSCRIPT for j=1:maxiter # Model predicted data. d_pred = Pr * Ainv * Ps' * q # GN update direction. p = lsqr(J, d_pred - d_obs; maxiter=6) fhistory_GN[j] = .5f0 * norm(d_pred - d_obs)^2 # OMIT LINE FROM MANUSCRIPT # update model and box constraints. model0.m = model0.m - reshape(p, model0.n) end","title":"FWI via the Gauss\u2013Newton method"},{"location":"tutorials/judi_leading_edge_tutorial/#conclusions","text":"In this final part of our FWI tutorial series, we demonstrated how to set up basic optimization algorithms for waveform inversion using JUDI. The methods shown here are all gradient based and differ in the way how update directions for the velocity model are computed. Our numerical examples can serve for the reader as a basis for developing more advanced FWI workflows, which usually include additional data preprocessing, frequency continuation techniques or further model constraints.","title":"Conclusions"},{"location":"tutorials/judi_leading_edge_tutorial/#acknowledgments","text":"This research was carried out as part of the SINBAD II project with the support of the member organizations of the SINBAD Consortium. This work was financially supported in part by EPSRC grant EP/L000407/1 and the Imperial College London Intel Parallel Computing Centre.","title":"Acknowledgments"},{"location":"tutorials/judi_leading_edge_tutorial/#references","text":"Aminzadeh, F., Brac, J., and Kunz, T., 1997. 3D Salt and Overthrust models. SEG/EAGE Modeling Series, No. 1: Distribution CD of Salt and Overthrust models, SEG Book Series Tulsa, Oklahoma. Bezanson, J., Karpinski, S., Shah, V. B., and Edelman, A., 2012, Julia: A fast dynamic language for technical computing: CoRR. Retrieved from http://arxiv.org/abs/1209.5145 Bunks, C., Saleck, F. M., Zaleski, S., and Chavent, G., 1995, Multiscale seismic waveform inversion: GEOPHYSICS, 60, 1457\u20131473. doi:10.1190/1.1443880 Johnson, S., 2017, Calling python functions from the julia language: GitHub repository. https://github.com/JuliaPy/PyCall.jl; GitHub. Lange, M., Kukreja, N., Louboutin, M., Luporini, F., Zacarias, F. V., Pandolfo, V., \u2026 Gorman, G., 2016, Devito: Towards a generic finite difference DSL using symbolic python: 6th workshop on python for high-performance and scientific computing. doi:10.1109/PyHPC.2016.9 Leeuwen, T. van, Aravkin, A. Y., Calandra, H., and Herrmann, F. J., 2013, In which domain should we measure the misfit for robust full waveform inversion? EAGE annual conference proceedings. doi:10.3997/2214-4609.20130839 Louboutin, M., Witte, P. A., Lange, M., Kukreja, N., Luporini, F., Gorman, G., and Herrmann, F. J., 2017, Full-waveform inversion - part 1: Forward modeling: Retrieved from https://www.slim.eos.ubc.ca/Publications/Private/Submitted/2017/louboutin2017fwi/louboutin2017fwi.html Louboutin, M., Witte, P. A., Lange, M., Kukreja, N., Luporini, F., Gorman, G., and Herrmann, F. J., 2018, Full-waveform inversion - part 2: Adjoint modeling: Nocedal, J., and Wright, S., 2009, Numerical optimization: (2nd ed.). Springer. Paige, C. C., and Saunders, M. A., 1982, LSQR: An algorithm for sparse linear equations and sparse least squares: ACM Trans. Math. Softw., 8, 43\u201371. doi:10.1145/355984.355989 Peters, B., and Herrmann, F. J., 2017, Constraints versus penalties for edge-preserving full-waveform inversion: The Leading Edge, 36, 94\u2013100. doi:10.1190/tle36010094.1 Warner, M., and Guasch, L., 2014, Adaptive waveform inversion: Theory: In SEG technical program expanded abstracts 2014 (pp. 1089\u20131093). doi:10.1190/segam2014-0371.1","title":"References"}]}