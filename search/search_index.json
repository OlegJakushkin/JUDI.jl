{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Julia Devito Inversion framework (JUDI.jl) JUDI is a framework for large-scale seismic modeling and inversion and designed to enable rapid translations of algorithms to fast and efficient code that scales to industry-size 3D problems. Wave equations in JUDI are solved with Devito , a Python domain-specific language for automated finite-difference (FD) computations. Docs overview This documentation provides an overview over JUDI's basic data structures and abstract operators: Tutorials : Shows basic functionalities and some common applications. Data structures : Explains the Model , Geometry and Info data structures and how to set up acquisition geometries. Abstract vectors : Documents JUDI's abstract vector classes judiVector , judiWavefield , judiRHS , judiWeights and judiExtendedSource . Abstract operators : Lists and explains JUDI's abstract linear operators judiModeling , judiJacobian , judiProjection and judiLRWF . IO : Read SEG-Y data and set up judiVectors for shot records and sources. Read velocity models. Installation First, install Devito using pip , or see the Devito's GitHub page for installation with Conda and further information. The current release of JUDI requires Python 3 and the current Devito version. Run all of the following commands from the (bash) terminal command line (not in the Julia REPL): pip3 install --user git+https://github.com/devitocodes/devito.git For reading and writing seismic SEG-Y data, JUDI uses the SegyIO package and matrix-free linear operators are based the Julia Operator LIbrary (JOLI): julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/SegyIO.jl\"))' julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JOLI.jl\"))' Once Devito, SegyIO and JOLI are installed, you can install JUDI as follows: julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JUDI.jl\"))' Once you have JUDI installed, you need to point Julia's PyCall package to the Python version for which we previsouly installed Devito. To do this, copy-paste the following commands into the (bash) terminal: export PYTHON=$(which python3) julia -e 'using Pkg; Pkg.build(\"PyCall\")' Running with Docker If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook: docker run -p 8888:8888 philippwitte/judi:v1.3 This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with: docker run -it philippwitte/judi:v1.3 /bin/bash Inside the container, all examples are located in the directory /app/judi/examples/scripts . Configure compiler and OpenMP Devito uses just-in-time compilation for the underlying wave equation solves. The default compiler is intel, but can be changed to any other specified compiler such as gnu . Either run the following command from the command line or add it to your ~/.bashrc file: export DEVITO_ARCH=gnu Devito uses shared memory OpenMP parallelism for solving PDEs. OpenMP is disabled by default, but you can enable OpenMP and define the number of threads (per PDE solve) as follows: export DEVITO_LANGUAGE=openmp # Enable OpenMP. export OMP_NUM_THREADS=4 # Number of OpenMP threads Troubleshooting For troubleshooting please raise an issue on the JUDI github page or contact Philipp Witte at pwitte3@gatech.edu or Mathias Louboutin at mlouboutin3@gatech.edu","title":"Home"},{"location":"#the-julia-devito-inversion-framework-judijl","text":"JUDI is a framework for large-scale seismic modeling and inversion and designed to enable rapid translations of algorithms to fast and efficient code that scales to industry-size 3D problems. Wave equations in JUDI are solved with Devito , a Python domain-specific language for automated finite-difference (FD) computations.","title":"The Julia Devito Inversion framework (JUDI.jl)"},{"location":"#docs-overview","text":"This documentation provides an overview over JUDI's basic data structures and abstract operators: Tutorials : Shows basic functionalities and some common applications. Data structures : Explains the Model , Geometry and Info data structures and how to set up acquisition geometries. Abstract vectors : Documents JUDI's abstract vector classes judiVector , judiWavefield , judiRHS , judiWeights and judiExtendedSource . Abstract operators : Lists and explains JUDI's abstract linear operators judiModeling , judiJacobian , judiProjection and judiLRWF . IO : Read SEG-Y data and set up judiVectors for shot records and sources. Read velocity models.","title":"Docs overview"},{"location":"#installation","text":"First, install Devito using pip , or see the Devito's GitHub page for installation with Conda and further information. The current release of JUDI requires Python 3 and the current Devito version. Run all of the following commands from the (bash) terminal command line (not in the Julia REPL): pip3 install --user git+https://github.com/devitocodes/devito.git For reading and writing seismic SEG-Y data, JUDI uses the SegyIO package and matrix-free linear operators are based the Julia Operator LIbrary (JOLI): julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/SegyIO.jl\"))' julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JOLI.jl\"))' Once Devito, SegyIO and JOLI are installed, you can install JUDI as follows: julia -e 'using Pkg; Pkg.develop(PackageSpec(url=\"https://github.com/slimgroup/JUDI.jl\"))' Once you have JUDI installed, you need to point Julia's PyCall package to the Python version for which we previsouly installed Devito. To do this, copy-paste the following commands into the (bash) terminal: export PYTHON=$(which python3) julia -e 'using Pkg; Pkg.build(\"PyCall\")'","title":"Installation"},{"location":"#running-with-docker","text":"If you do not want to install JUDI, you can run JUDI as a docker image. The first possibility is to run the docker container as a Jupyter notebook: docker run -p 8888:8888 philippwitte/judi:v1.3 This command downloads the image and launches a container. You will see a link that you can copy-past to your browser to access the notebooks. Alternatively, you can run a bash session, in which you can start a regular interactive Julia session and run the example scripts. Download/start the container as a bash session with: docker run -it philippwitte/judi:v1.3 /bin/bash Inside the container, all examples are located in the directory /app/judi/examples/scripts .","title":"Running with Docker"},{"location":"#configure-compiler-and-openmp","text":"Devito uses just-in-time compilation for the underlying wave equation solves. The default compiler is intel, but can be changed to any other specified compiler such as gnu . Either run the following command from the command line or add it to your ~/.bashrc file: export DEVITO_ARCH=gnu Devito uses shared memory OpenMP parallelism for solving PDEs. OpenMP is disabled by default, but you can enable OpenMP and define the number of threads (per PDE solve) as follows: export DEVITO_LANGUAGE=openmp # Enable OpenMP. export OMP_NUM_THREADS=4 # Number of OpenMP threads","title":"Configure compiler and OpenMP"},{"location":"#troubleshooting","text":"For troubleshooting please raise an issue on the JUDI github page or contact Philipp Witte at pwitte3@gatech.edu or Mathias Louboutin at mlouboutin3@gatech.edu","title":"Troubleshooting"},{"location":"about/","text":"Authors This documentation was created by Philipp A. Witte ( pwitte3@gatech.edu ) from the Georgia Institute of Technology. People involved in the development of JUDI include: Philipp A. Witte (Georgia Institute of Technology) Mathias Louboutin (Georgia Institute of Technology) Henryk Modzelewski (The Univeristy of British Columbia) Felix J. Herrmann (Georgia Institute of Technology) The research of this project was carried out at the Seismic Laboratory for Imaging and Modeling (SLIM) at the Georgia Institute of Technology, Atlanta, USA and at the University of British Columbia (UBC), in Vancouver, Canada.","title":"About"},{"location":"about/#authors","text":"This documentation was created by Philipp A. Witte ( pwitte3@gatech.edu ) from the Georgia Institute of Technology. People involved in the development of JUDI include: Philipp A. Witte (Georgia Institute of Technology) Mathias Louboutin (Georgia Institute of Technology) Henryk Modzelewski (The Univeristy of British Columbia) Felix J. Herrmann (Georgia Institute of Technology) The research of this project was carried out at the Seismic Laboratory for Imaging and Modeling (SLIM) at the Georgia Institute of Technology, Atlanta, USA and at the University of British Columbia (UBC), in Vancouver, Canada.","title":"Authors"},{"location":"abstract_vectors/","text":"Abstract JUDI vectors judiVector The class judiVector is the basic data structure for seismic shot records or seismic sources. From JUDI's perspective, both are treated the same and can be multiplied with modeling operators. Construction: In the most basic way, judiVectors are contstructed from a Geometry object (containing either source or receiver geometry) and a cell array of data: x = judiVector(geometry, data) Parameters: geometry : A Geometry object containing source or receiver geometries. data : A cell array with one cell per source location, where each cell contains a 1D/2D Julia array with either the receiver data or the source wavelet. Alternatively: pass a single Julia array which will be used for all source locations. Access fields (in-core data containers): # Access i-th shot record x.data[i] # Extract judiVector for i-th shot x1 = x[i] # Access j-th receiver location of i-th shot x.geometry.xloc[i][j] Access fields (out-of-core data containers): # Access data container of i-th shot x.data[i] # Read data from i-th shot into memory x.data[i][1].data # Access out-of-core geometry x.geometry # Load OOC geometry into memory Geometry(x.geometry) Operations: In-core judiVectors can be used like regular Julia arrays and support common operations such as: x = judiVector(geometry, data) # Size (as if all data was vectorized) size(x) # Norms norm(x) # Inner product dot(x, x) # Addition, subtraction (geometries must match) y = x + x z = x - y # Scaling \u03b1 = 2f0 y = x * \u03b1 # Concatenate y = vcat(x, x) judiWavefield Abstract vector class for wavefields. Construction: u = judiWavefield(info, dt, data) Parameters: info : An Info structure. dt : Time sampling interval of wavefield. data : Cell array with one cell per source location. Each cell contains a 3D or 4D array for a seismic wavefield. The order of dimensions is (nt, nx, nz) (2D) and (nt, nx, ny, nz) (3D), where nt is the number of time steps. Access fields: # Access wavefield from i-th shot location u.data[i] Operations: Supports some basic arithmetric operations: # Size size(u) # Norms norm(u) # Inner product dot(u, y) # Addition, subtraction v = u + u z = u - v # Absolute value abs(u) # Concatenation v = vcat(u, u) judiRHS Abstract vector class for a right-hand-side (RHS). A RHS has the size of a full wavefield, but only contains the data of the source wavelet of shot records in memory, as well as the geometry information of where the data is injected during modeling. Construction: rhs = judiRHS(info, geometry, data) A JUDI RHS can also be constructed by multplying a judiVector and the corresponding transpose of a judiProjection operator: rhs1 = Ps'*q rhs2 = Pr'*d_obs where Ps and Pr are judiProjection operators for sources and receivers respectively and q and d_obs are judiVectors with the source and receiver data. Parameters: info : An Info structure. geometry : A JUDI Geometry structure, containing the source or receiver geometry. data : A cell array with one cell per source location. Each cell contains a 1D/2D Julia array with the source or receiver data. Access fields: Accessible fields include: # Source/receiver data rhs.data # Source/receiver geometry rhs.geometry # Info structure rhs.info judiWeights Abstract vector class for extended source weights. The weights for each shot location have the dimensions of the model (namely model.n ). Construction: w = judiWeights(weights) Parameters: weights : Cell array with one cell per shot location. Each cell contains a 2D/3D Julia array with the weights for the spatially extended source. Alternatively: pass a single Julia array which will be used for all source locations. Access fields: # Access weights of i-th shot locatoin w.weights[i] Operations: Supports the same arithmetric operations as a judiVector . judiExtendedSource Abstract data vector for an extended source. This data structure is the equivalent type of judiRHS for extended source modeling. A judiExtendedSource has the dimension of the full wavefield, but only contains the 1D wavelet and the 2D/3D spatially varying weights in memory. Construction: Construction from weights and source wavelets: ex_src = judiExtendedSource(info, wavelet, weights) Construction from a judiWeights vector and a judiLRWF injection operator: ex_src = Pw'*w where Pw is a judiLRWF operator and w is a judiWeights vector. Parameters: info : An Info structure. wavelet : A cell array with one cell per source location containing a 1D Julia array with the time varying source wavelet or a single 1D Julia array, which is used for all source locations. weights : A cell array with one cell per source location containing a 2D/3D Julia array with the spatially varying source weights or a single 1D Julia array, which is used for all source locations. Access fields: # Access weights of i-th source location ex_src.weights[i] # Access wavelet of i-th source location ex_src.wavelet[i]","title":"Abstract vectors"},{"location":"abstract_vectors/#abstract-judi-vectors","text":"","title":"Abstract JUDI vectors"},{"location":"abstract_vectors/#judivector","text":"The class judiVector is the basic data structure for seismic shot records or seismic sources. From JUDI's perspective, both are treated the same and can be multiplied with modeling operators. Construction: In the most basic way, judiVectors are contstructed from a Geometry object (containing either source or receiver geometry) and a cell array of data: x = judiVector(geometry, data) Parameters: geometry : A Geometry object containing source or receiver geometries. data : A cell array with one cell per source location, where each cell contains a 1D/2D Julia array with either the receiver data or the source wavelet. Alternatively: pass a single Julia array which will be used for all source locations. Access fields (in-core data containers): # Access i-th shot record x.data[i] # Extract judiVector for i-th shot x1 = x[i] # Access j-th receiver location of i-th shot x.geometry.xloc[i][j] Access fields (out-of-core data containers): # Access data container of i-th shot x.data[i] # Read data from i-th shot into memory x.data[i][1].data # Access out-of-core geometry x.geometry # Load OOC geometry into memory Geometry(x.geometry) Operations: In-core judiVectors can be used like regular Julia arrays and support common operations such as: x = judiVector(geometry, data) # Size (as if all data was vectorized) size(x) # Norms norm(x) # Inner product dot(x, x) # Addition, subtraction (geometries must match) y = x + x z = x - y # Scaling \u03b1 = 2f0 y = x * \u03b1 # Concatenate y = vcat(x, x)","title":"judiVector"},{"location":"abstract_vectors/#judiwavefield","text":"Abstract vector class for wavefields. Construction: u = judiWavefield(info, dt, data) Parameters: info : An Info structure. dt : Time sampling interval of wavefield. data : Cell array with one cell per source location. Each cell contains a 3D or 4D array for a seismic wavefield. The order of dimensions is (nt, nx, nz) (2D) and (nt, nx, ny, nz) (3D), where nt is the number of time steps. Access fields: # Access wavefield from i-th shot location u.data[i] Operations: Supports some basic arithmetric operations: # Size size(u) # Norms norm(u) # Inner product dot(u, y) # Addition, subtraction v = u + u z = u - v # Absolute value abs(u) # Concatenation v = vcat(u, u)","title":"judiWavefield"},{"location":"abstract_vectors/#judirhs","text":"Abstract vector class for a right-hand-side (RHS). A RHS has the size of a full wavefield, but only contains the data of the source wavelet of shot records in memory, as well as the geometry information of where the data is injected during modeling. Construction: rhs = judiRHS(info, geometry, data) A JUDI RHS can also be constructed by multplying a judiVector and the corresponding transpose of a judiProjection operator: rhs1 = Ps'*q rhs2 = Pr'*d_obs where Ps and Pr are judiProjection operators for sources and receivers respectively and q and d_obs are judiVectors with the source and receiver data. Parameters: info : An Info structure. geometry : A JUDI Geometry structure, containing the source or receiver geometry. data : A cell array with one cell per source location. Each cell contains a 1D/2D Julia array with the source or receiver data. Access fields: Accessible fields include: # Source/receiver data rhs.data # Source/receiver geometry rhs.geometry # Info structure rhs.info","title":"judiRHS"},{"location":"abstract_vectors/#judiweights","text":"Abstract vector class for extended source weights. The weights for each shot location have the dimensions of the model (namely model.n ). Construction: w = judiWeights(weights) Parameters: weights : Cell array with one cell per shot location. Each cell contains a 2D/3D Julia array with the weights for the spatially extended source. Alternatively: pass a single Julia array which will be used for all source locations. Access fields: # Access weights of i-th shot locatoin w.weights[i] Operations: Supports the same arithmetric operations as a judiVector .","title":"judiWeights"},{"location":"abstract_vectors/#judiextendedsource","text":"Abstract data vector for an extended source. This data structure is the equivalent type of judiRHS for extended source modeling. A judiExtendedSource has the dimension of the full wavefield, but only contains the 1D wavelet and the 2D/3D spatially varying weights in memory. Construction: Construction from weights and source wavelets: ex_src = judiExtendedSource(info, wavelet, weights) Construction from a judiWeights vector and a judiLRWF injection operator: ex_src = Pw'*w where Pw is a judiLRWF operator and w is a judiWeights vector. Parameters: info : An Info structure. wavelet : A cell array with one cell per source location containing a 1D Julia array with the time varying source wavelet or a single 1D Julia array, which is used for all source locations. weights : A cell array with one cell per source location containing a 2D/3D Julia array with the spatially varying source weights or a single 1D Julia array, which is used for all source locations. Access fields: # Access weights of i-th source location ex_src.weights[i] # Access wavelet of i-th source location ex_src.wavelet[i]","title":"judiExtendedSource"},{"location":"data_structures/","text":"Data structures Model structure Data structure for velocity models in JUDI. Construction: Model requires the following input arguments: model = Model(n, d, o, m; nb=40, rho=1f0) Parameters: n : Integer tuple with number of grid points in each dimension, e.g. n = (120, 100) (2D) or n = (120, 100, 80) (3D). The order of dimenions in all tuples is (x, z) for 2D and (x, y, z) for 3D . d : Real tuple with grid spacing in each dimension. o : Real tuple with coordinate origin (typically o = (0f0, 0f0) ). m : 2D or 3D array of the velocity model in squared slowness [s^2/km^2] . nb : Number of absorbing boundary points on each edge. Default is nb = 40 . rho : 2D or 3D array of the density in [g / cm^3] Access fields: Accessible fields include all of the above parameters, which can be accessed as follows: # Access model model.m # Access number of grid points model.n Geometry structure JUDI's geometry structure contains the information of either the source or the receiver geometry. Construction: Construct an (in-core) geometry object for either a source or receiver set up: geometry = Geometry(xloc, yloc, zloc; dt=[], nt=[], t=[]) Parameters: xloc : Cell array, with one cell per source location. Each cell contains a 1D Julia array with the coordinates in the horizontal x direction. Coordinates are specified as distances in meters [m] relative to the model origin. yloc : Cell array for horizontal y coordinates. For 2D, set each cell entry to 0f0 . zloc : Cell array for depth coordinates (z) at each source location. dt : Cell array with the time intervals at which the data was sampled (i.e. a shot record or source wavelet was sampled). Units in milliseconds [ms] . nt : Cell array with number of time samples. t : Cell array with the recording lengths in milliseconds [ms] . From the optional arguments, you have to pass (at least) two of dt , nt and t . The third value is automatically determined and set from the two other values. Access fields: Accessible fields include all of the above parameters, which can be accessed as follows: # Access cell arrays of x coordinates: geometry.xloc # Access x coordinates of the i-th source location geometry.xloc[i] # Access j-th receiver location (in x) of the i-th source location geometry.xloc[i][j] Info structure The info structure contains some basic dimensionality information that needs to be available to any type of linear operator: Construction: info = Info(n, nsrc, nt) Parameters : n : Total number of grid points in all dimensions. Given by prod(model.n) . nsrc : Number of source/shot locations in the seismic experiment. nt : Number of computational time steps. You can automatically obtain the number of computational time steps as follows: nt = get_computational_nt(src_geometry, rec_geometry, model) where src_geometry is a Geometry object with the source geometry, rec_geometry is a Geometry object with the receiver geometry and model is a Model structure. Options structure The options structure allows setting several modeling parameters. Construction: Choose all default options: opt = Options() List of all possible options: opt = Options( space_order:: Integer space_order:: Integer free_surface:: Bool limit_m:: Bool buffer_size:: Real save_data_to_disk:: Bool save_wavefield_to_disk:: Bool file_path:: String file_name:: String sum_padding:: Bool optimal_checkpointing:: Bool num_checkpoints:: Union{Integer, Nothing} checkpoints_maxmem:: Union{Real, Nothing} frequencies:: Array subsampling_factor:: Integer dft_subsampling_factor:: Integer isic:: Bool return_array:: Bool dt_comp:: Union{Real, Nothing} ) Parameters: space_order : Finite difference space order for wave equation (default is 8 , needs to be multiple of 4). free_surface : Set to true to enable a free surface boundary condition (default is false ). limit_m : For 3D modeling, limit modeling domain to area with receivers (default is false ). buffer_size : If limit_m=true , define buffer area on each side of modeling domain (in meters) save_data_to_disk : If true , saves shot records as separate SEG-Y files (default is false ). save_wavefield_to_disk : If wavefield is return value, save wavefield to disk as pickle file (default is false ). file_path : Path to directory where data is saved. file_name : Shot records will be saved as specified file name plus its source coordinates. sum_padding : When removing the padding area of the gradient, sum values into the most outer rows/columns (default is false ). Required to pass adjoint tests. optimal_checkpointing : Use optimal wavefield checkpointing (default is false ). num_checkpoints : Number of checkpoints. If not supplied, is set to log(num_timesteps) . checkpoints_maxmem : Maximum amount of memory that can be allocated for checkpoints (MB). frequencies : Provide a cell array (one cell per shot location), where each cell contains an array of frequencies. In this case, the RTM/FWI gradient is computed for the given set of frequencies using on-the-fly Fourier transforms (default is nothing , i.e. the gradient is computed in the time domain). subsampling_factor : Compute forward wavefield on a time axis that is reduced by a given factor (default is 1 ). dft_subsampling_factor : Compute on-the-fly DFTs on a time axis that is reduced by a given factor (default is 1 ). isic : Use linearized inverse scattering imaging condition for the Jacobian (default is false ). return_array : Return data from nonlinear/linear modeling as a plain Julia array instead of as a judiVector (default is false ). dt_comp : Overwrite automatically computed computational time step (default option) with this value.","title":"Data structures"},{"location":"data_structures/#data-structures","text":"","title":"Data structures"},{"location":"data_structures/#model-structure","text":"Data structure for velocity models in JUDI. Construction: Model requires the following input arguments: model = Model(n, d, o, m; nb=40, rho=1f0) Parameters: n : Integer tuple with number of grid points in each dimension, e.g. n = (120, 100) (2D) or n = (120, 100, 80) (3D). The order of dimenions in all tuples is (x, z) for 2D and (x, y, z) for 3D . d : Real tuple with grid spacing in each dimension. o : Real tuple with coordinate origin (typically o = (0f0, 0f0) ). m : 2D or 3D array of the velocity model in squared slowness [s^2/km^2] . nb : Number of absorbing boundary points on each edge. Default is nb = 40 . rho : 2D or 3D array of the density in [g / cm^3] Access fields: Accessible fields include all of the above parameters, which can be accessed as follows: # Access model model.m # Access number of grid points model.n","title":"Model structure"},{"location":"data_structures/#geometry-structure","text":"JUDI's geometry structure contains the information of either the source or the receiver geometry. Construction: Construct an (in-core) geometry object for either a source or receiver set up: geometry = Geometry(xloc, yloc, zloc; dt=[], nt=[], t=[]) Parameters: xloc : Cell array, with one cell per source location. Each cell contains a 1D Julia array with the coordinates in the horizontal x direction. Coordinates are specified as distances in meters [m] relative to the model origin. yloc : Cell array for horizontal y coordinates. For 2D, set each cell entry to 0f0 . zloc : Cell array for depth coordinates (z) at each source location. dt : Cell array with the time intervals at which the data was sampled (i.e. a shot record or source wavelet was sampled). Units in milliseconds [ms] . nt : Cell array with number of time samples. t : Cell array with the recording lengths in milliseconds [ms] . From the optional arguments, you have to pass (at least) two of dt , nt and t . The third value is automatically determined and set from the two other values. Access fields: Accessible fields include all of the above parameters, which can be accessed as follows: # Access cell arrays of x coordinates: geometry.xloc # Access x coordinates of the i-th source location geometry.xloc[i] # Access j-th receiver location (in x) of the i-th source location geometry.xloc[i][j]","title":"Geometry structure"},{"location":"data_structures/#info-structure","text":"The info structure contains some basic dimensionality information that needs to be available to any type of linear operator: Construction: info = Info(n, nsrc, nt) Parameters : n : Total number of grid points in all dimensions. Given by prod(model.n) . nsrc : Number of source/shot locations in the seismic experiment. nt : Number of computational time steps. You can automatically obtain the number of computational time steps as follows: nt = get_computational_nt(src_geometry, rec_geometry, model) where src_geometry is a Geometry object with the source geometry, rec_geometry is a Geometry object with the receiver geometry and model is a Model structure.","title":"Info structure"},{"location":"data_structures/#options-structure","text":"The options structure allows setting several modeling parameters. Construction: Choose all default options: opt = Options() List of all possible options: opt = Options( space_order:: Integer space_order:: Integer free_surface:: Bool limit_m:: Bool buffer_size:: Real save_data_to_disk:: Bool save_wavefield_to_disk:: Bool file_path:: String file_name:: String sum_padding:: Bool optimal_checkpointing:: Bool num_checkpoints:: Union{Integer, Nothing} checkpoints_maxmem:: Union{Real, Nothing} frequencies:: Array subsampling_factor:: Integer dft_subsampling_factor:: Integer isic:: Bool return_array:: Bool dt_comp:: Union{Real, Nothing} ) Parameters: space_order : Finite difference space order for wave equation (default is 8 , needs to be multiple of 4). free_surface : Set to true to enable a free surface boundary condition (default is false ). limit_m : For 3D modeling, limit modeling domain to area with receivers (default is false ). buffer_size : If limit_m=true , define buffer area on each side of modeling domain (in meters) save_data_to_disk : If true , saves shot records as separate SEG-Y files (default is false ). save_wavefield_to_disk : If wavefield is return value, save wavefield to disk as pickle file (default is false ). file_path : Path to directory where data is saved. file_name : Shot records will be saved as specified file name plus its source coordinates. sum_padding : When removing the padding area of the gradient, sum values into the most outer rows/columns (default is false ). Required to pass adjoint tests. optimal_checkpointing : Use optimal wavefield checkpointing (default is false ). num_checkpoints : Number of checkpoints. If not supplied, is set to log(num_timesteps) . checkpoints_maxmem : Maximum amount of memory that can be allocated for checkpoints (MB). frequencies : Provide a cell array (one cell per shot location), where each cell contains an array of frequencies. In this case, the RTM/FWI gradient is computed for the given set of frequencies using on-the-fly Fourier transforms (default is nothing , i.e. the gradient is computed in the time domain). subsampling_factor : Compute forward wavefield on a time axis that is reduced by a given factor (default is 1 ). dft_subsampling_factor : Compute on-the-fly DFTs on a time axis that is reduced by a given factor (default is 1 ). isic : Use linearized inverse scattering imaging condition for the Jacobian (default is false ). return_array : Return data from nonlinear/linear modeling as a plain Julia array instead of as a judiVector (default is false ). dt_comp : Overwrite automatically computed computational time step (default option) with this value.","title":"Options structure"},{"location":"helper/","text":"Helper functions Ricker wavelet Create a 1D Ricker wavelet: wavelet = ricker_wavelet(tmax, dt, f0) Parameters: tmax : Modeling time in milliseconds [ms] . dt : Sampling interval in milliseconds (can be different from dt of shot data). f0 : Peak frequency in Kilohertz [kHz] . Compute CFL time stepping interval Calculate the time stepping interval based on the CFL condition dt = calculate_dt(n, d, o, v, rho) Parameters: n : Tuple with number of grid points. d : Tuple with grid spacing. o : Tuple with coordiante system origin. v : 2D/3D Julia array with velocity in [km/s] . rho : 2D/3D Julia array with density in [g/cm^3] . Compute number of computational time steps Estimate the number of computational time steps. Required for calculating the dimensions of the matrix-free linear modeling operators: nt = get_computational_nt(src_geometry, rec_geometry, model) or (for extended source modeling, where src_geometry is not available): nt = get_computational_nt(rec_geometry, model) Parameters: src_geometry : A JUDI Geometry object with the source geometry. rec_geometry : A JUDI Geometry object with the receiver geometry. model : A JUDI Model object containing the velocity model. Set up 3D acquisition grid Helper function to create a regular acquisition grid for a 3D survey. x_coord_full, y_coord_full, z_coord_full = setup_3D_grid(x_coord, y_coord, z_coord) Parameters: x_coord : 1D julia vector of length nx , where nx is the number of distinct source/receiver locations in x direction. y_coord : 1D julia vector of length ny , where ny is the number of distinct source/receiver locations in y direction. z_coord : Single scalar for depth of sources/receivers. Returns: x_coord_full : 1D julia vector of length nx * ny with source/receiver locations in x direction. y_coord_full : 1D julia vector of length nx * ny with source/receiver locations in y direction. z_coord_full : 1D julia vector of length nx * ny with source/receiver locations in z direction. Data interpolation Time interpolation for source/receiver data using splines. For modeling, the data is interpolated automatically onto the computational time axis, so generally, these functions are not needed for users. data_interp, geometry_out = time_resample(data, geometry_in, dt_out; order=2) or : data_interp = time_resample(data, geometry_out, dt_in; order=2) Parameters: data : 2D Julia array of source/receiver data. geometry_in : A JUDI Geometry object of the input data before interpolation. dt_out : Sampling interval of interpolated shot record in milliseconds [ms] . order : Order of splines for interpolation. or: data : 2D Julia array of source/receiver data. geometry_out : A JUDI Geometry object of the data after interpolation. dt_in : Sampling interval of input shot record in milliseconds [ms] . Generate and sample from frequency distribution Create a probability distribution with the shape of the source spectrum from which we can draw random frequencies. dist = generate_distribution(q; src_no=1) Parameters: q : Source vector of type judiVector from which to create the distribution. src_no : Source number for which to create the distribution (i.e. q[src_no] ). Returns: dist : probability distribution. We can draw random samples from dist by passing it values between 0 and 1: # Draw a single random frequency f = dist(rand(1)) # Draw 10 random frequencies f = dist(rand(10)) Alternatively, we can use the function: f = select_frequencies(dist; fmin=0f0, fmax=Inf, nf=1) to draw nf number of frequencies for a given distribution dist in the frequency range of fmin to fmax (both in kHz).","title":"Helper functions"},{"location":"helper/#helper-functions","text":"","title":"Helper functions"},{"location":"helper/#ricker-wavelet","text":"Create a 1D Ricker wavelet: wavelet = ricker_wavelet(tmax, dt, f0) Parameters: tmax : Modeling time in milliseconds [ms] . dt : Sampling interval in milliseconds (can be different from dt of shot data). f0 : Peak frequency in Kilohertz [kHz] .","title":"Ricker wavelet"},{"location":"helper/#compute-cfl-time-stepping-interval","text":"Calculate the time stepping interval based on the CFL condition dt = calculate_dt(n, d, o, v, rho) Parameters: n : Tuple with number of grid points. d : Tuple with grid spacing. o : Tuple with coordiante system origin. v : 2D/3D Julia array with velocity in [km/s] . rho : 2D/3D Julia array with density in [g/cm^3] .","title":"Compute CFL time stepping interval"},{"location":"helper/#compute-number-of-computational-time-steps","text":"Estimate the number of computational time steps. Required for calculating the dimensions of the matrix-free linear modeling operators: nt = get_computational_nt(src_geometry, rec_geometry, model) or (for extended source modeling, where src_geometry is not available): nt = get_computational_nt(rec_geometry, model) Parameters: src_geometry : A JUDI Geometry object with the source geometry. rec_geometry : A JUDI Geometry object with the receiver geometry. model : A JUDI Model object containing the velocity model.","title":"Compute number of computational time steps"},{"location":"helper/#set-up-3d-acquisition-grid","text":"Helper function to create a regular acquisition grid for a 3D survey. x_coord_full, y_coord_full, z_coord_full = setup_3D_grid(x_coord, y_coord, z_coord) Parameters: x_coord : 1D julia vector of length nx , where nx is the number of distinct source/receiver locations in x direction. y_coord : 1D julia vector of length ny , where ny is the number of distinct source/receiver locations in y direction. z_coord : Single scalar for depth of sources/receivers. Returns: x_coord_full : 1D julia vector of length nx * ny with source/receiver locations in x direction. y_coord_full : 1D julia vector of length nx * ny with source/receiver locations in y direction. z_coord_full : 1D julia vector of length nx * ny with source/receiver locations in z direction.","title":"Set up 3D acquisition grid"},{"location":"helper/#data-interpolation","text":"Time interpolation for source/receiver data using splines. For modeling, the data is interpolated automatically onto the computational time axis, so generally, these functions are not needed for users. data_interp, geometry_out = time_resample(data, geometry_in, dt_out; order=2) or : data_interp = time_resample(data, geometry_out, dt_in; order=2) Parameters: data : 2D Julia array of source/receiver data. geometry_in : A JUDI Geometry object of the input data before interpolation. dt_out : Sampling interval of interpolated shot record in milliseconds [ms] . order : Order of splines for interpolation. or: data : 2D Julia array of source/receiver data. geometry_out : A JUDI Geometry object of the data after interpolation. dt_in : Sampling interval of input shot record in milliseconds [ms] .","title":"Data interpolation"},{"location":"helper/#generate-and-sample-from-frequency-distribution","text":"Create a probability distribution with the shape of the source spectrum from which we can draw random frequencies. dist = generate_distribution(q; src_no=1) Parameters: q : Source vector of type judiVector from which to create the distribution. src_no : Source number for which to create the distribution (i.e. q[src_no] ). Returns: dist : probability distribution. We can draw random samples from dist by passing it values between 0 and 1: # Draw a single random frequency f = dist(rand(1)) # Draw 10 random frequencies f = dist(rand(10)) Alternatively, we can use the function: f = select_frequencies(dist; fmin=0f0, fmax=Inf, nf=1) to draw nf number of frequencies for a given distribution dist in the frequency range of fmin to fmax (both in kHz).","title":"Generate and sample from frequency distribution"},{"location":"io/","text":"Input/Output For reading and writing SEG-Y data, JUDI uses the SegyIO.jl package. JUDI supports reading SEG-Y from disk into memory, as well as working with out-of-core (OOC) data containers. In the latter case, judiVectors contain look-up tables that allow accessing the underlying data in constant time. Reading SEG-Y files into memory To read a single SEG-Y file into memory, use the segy_read function: using SegyIO block = segy_read(\"data.segy\") From a SegyIO data block, you can create an in-core judiVector , as well as a Geometry object for the source: # judiVector for observed data d_obs = judiVector(block; segy_depth_key=\"RecGroupElevation\") # Source geometry src_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\") The optional keyword segy_depth_key specifies which SEG-Y header stores the depth coordinate. After reading a block , you can check block.traceheaders to see which trace headers are set and where to find the depth coordinates for sources or receivers. The d_obs vector constains the receiver geometry in d_obs.geometry , so there is no need to set up a separate geometry object manually. However, in principle we can set up a receiver Geometry object as follows: rec_geometry = Geometry(block; key=\"receiver\", segy_depth_key=\"RecGroupElevation\") Writing SEG-Y files To write a judiVector as a SEG-Y file, we need a judiVector containing the receiver data and geometry, as well as a judiVector with the source coordinates. From the judiVectors , we first create a SegyIO block: block = judiVector_to_SeisBlock(d_obs, q) where d_obs and q are judiVectors for receiver and source data respectively. Next, we can write a SEG-Y file from a SegyIO block : segy_write(\"new_file.segy\", block) # writes a SEG-Y file called new_file.segy Reading out-of-core SEG-Y files For SEG-Y files that do not fit into memory, JUDI provides the possibility to work with OOC data containers. First, SegyIO scans also available files and then creates a lookup table, including a summary of the most important SEG-Y header values. See SegyIO's documentation for more information. First we provide the path to the directory that we want to scan, as well as a string that appears in all the files we want to scan. For example, here we want to scan all files that contain the string \"bp_observed_data\" . The third argument is a list of SEG-Y headers for which we create a summary. For creating OOC judiVectors , always include the \"GroupX\" , \"GroupY\" and \"dt\" keyworkds, as well as the keywords that carry the source and receiver depth coordinates: # Specify direcotry to scan path_to_data = \"/home/username/data_directory/\" # Scan files in given directory and create OOC data container container = segy_scan(path_to_data, \"bp_observed_data\", [\"GroupX\", \"GroupY\", \"RecGroupElevation\", \"SourceDepth\", \"dt\"]) Depending of the number and size of the underlying files, this process can take multiple hours, but it only has to be executed once! Furthermore, parallel scanning is supported as well. Once we have scanned all files in the directory, we can create an OOC judiVector and source Geometry object as follows: # Create OOC judiVector d_obs = judiVector(container; segy_depth_key=\"RecGroupElevation\") # Create OOC source geometry object src_geometry = Geometry(container; key=\"source\", segy_depth_key=\"SourceDepth\") Reading and writing velocity models JUDI does not require velocity models to be read or saved in any specific format. Any file format that allows reading the velocity model as a two or three-dimensional Julia array will work. In our examples, we often use the JLD or HDF5 packages to read/write velocity models and the corresponing meta data (i.e. grid spacings and origins). If your model is a SEG-Y file, use the segy_read function from SegyIO as shown above. Create an example model to write and read: n = (120, 100) d = (10.0, 10.0) o = (0.0, 0.0) v = ones(Float32, n) .* 1.5f0 m = 1f0 ./ v.^2 Write a model as a .jld file: using JLD save(\"my_model.jld\", \"n\", n, \"d\", d, \"o\", o, \"m\", m) Read a model from a .jld file: # Returns a Julia dictionary M = load(\"my_model.jld\") n = M[\"n\"] d = M[\"d\"] o = M[\"o\"] m = M[\"m\"] # Set up a Model object model = Model(n, d, o, m)","title":"Input/Output"},{"location":"io/#inputoutput","text":"For reading and writing SEG-Y data, JUDI uses the SegyIO.jl package. JUDI supports reading SEG-Y from disk into memory, as well as working with out-of-core (OOC) data containers. In the latter case, judiVectors contain look-up tables that allow accessing the underlying data in constant time.","title":"Input/Output"},{"location":"io/#reading-seg-y-files-into-memory","text":"To read a single SEG-Y file into memory, use the segy_read function: using SegyIO block = segy_read(\"data.segy\") From a SegyIO data block, you can create an in-core judiVector , as well as a Geometry object for the source: # judiVector for observed data d_obs = judiVector(block; segy_depth_key=\"RecGroupElevation\") # Source geometry src_geometry = Geometry(block; key=\"source\", segy_depth_key=\"SourceDepth\") The optional keyword segy_depth_key specifies which SEG-Y header stores the depth coordinate. After reading a block , you can check block.traceheaders to see which trace headers are set and where to find the depth coordinates for sources or receivers. The d_obs vector constains the receiver geometry in d_obs.geometry , so there is no need to set up a separate geometry object manually. However, in principle we can set up a receiver Geometry object as follows: rec_geometry = Geometry(block; key=\"receiver\", segy_depth_key=\"RecGroupElevation\")","title":"Reading SEG-Y files into memory"},{"location":"io/#writing-seg-y-files","text":"To write a judiVector as a SEG-Y file, we need a judiVector containing the receiver data and geometry, as well as a judiVector with the source coordinates. From the judiVectors , we first create a SegyIO block: block = judiVector_to_SeisBlock(d_obs, q) where d_obs and q are judiVectors for receiver and source data respectively. Next, we can write a SEG-Y file from a SegyIO block : segy_write(\"new_file.segy\", block) # writes a SEG-Y file called new_file.segy","title":"Writing SEG-Y files"},{"location":"io/#reading-out-of-core-seg-y-files","text":"For SEG-Y files that do not fit into memory, JUDI provides the possibility to work with OOC data containers. First, SegyIO scans also available files and then creates a lookup table, including a summary of the most important SEG-Y header values. See SegyIO's documentation for more information. First we provide the path to the directory that we want to scan, as well as a string that appears in all the files we want to scan. For example, here we want to scan all files that contain the string \"bp_observed_data\" . The third argument is a list of SEG-Y headers for which we create a summary. For creating OOC judiVectors , always include the \"GroupX\" , \"GroupY\" and \"dt\" keyworkds, as well as the keywords that carry the source and receiver depth coordinates: # Specify direcotry to scan path_to_data = \"/home/username/data_directory/\" # Scan files in given directory and create OOC data container container = segy_scan(path_to_data, \"bp_observed_data\", [\"GroupX\", \"GroupY\", \"RecGroupElevation\", \"SourceDepth\", \"dt\"]) Depending of the number and size of the underlying files, this process can take multiple hours, but it only has to be executed once! Furthermore, parallel scanning is supported as well. Once we have scanned all files in the directory, we can create an OOC judiVector and source Geometry object as follows: # Create OOC judiVector d_obs = judiVector(container; segy_depth_key=\"RecGroupElevation\") # Create OOC source geometry object src_geometry = Geometry(container; key=\"source\", segy_depth_key=\"SourceDepth\")","title":"Reading out-of-core SEG-Y files"},{"location":"io/#reading-and-writing-velocity-models","text":"JUDI does not require velocity models to be read or saved in any specific format. Any file format that allows reading the velocity model as a two or three-dimensional Julia array will work. In our examples, we often use the JLD or HDF5 packages to read/write velocity models and the corresponing meta data (i.e. grid spacings and origins). If your model is a SEG-Y file, use the segy_read function from SegyIO as shown above. Create an example model to write and read: n = (120, 100) d = (10.0, 10.0) o = (0.0, 0.0) v = ones(Float32, n) .* 1.5f0 m = 1f0 ./ v.^2 Write a model as a .jld file: using JLD save(\"my_model.jld\", \"n\", n, \"d\", d, \"o\", o, \"m\", m) Read a model from a .jld file: # Returns a Julia dictionary M = load(\"my_model.jld\") n = M[\"n\"] d = M[\"d\"] o = M[\"o\"] m = M[\"m\"] # Set up a Model object model = Model(n, d, o, m)","title":"Reading and writing velocity models"},{"location":"linear_operators/","text":"Linear Operators judiModeling Seismic modeling operator for solving a wave equation for a given right-hand-side. Construction: Construct a modeling operator without source/receiver projections: F = judiModeling(info, model; options=opt) Construct a modeling operator with source/receiver projections: F = judiModeling(info, model, src_geometry, rec_geometry) Construct a modeling operator from an existing operator without geometries and projection operators: F = Pr*F*Ps' where Ps and Pr are source/receiver projection operators of type judiProjection . Construct a modeling operator for extended source modeling : F = Pr*F*Pw' where Pw is a judiLRWF (low-rank-wavefield) projection operator. Parameters: info : A Info structure. model : A Model structure containg the velocity model and grid specifications. src_geometry : An object of type Geometry containing the source geometry. rec_geometry : An object of type Geometry containing the receiver geometry. opt : An object of type Options , specifying additional modeling parameters. Accessible fields: # Info structure F.info # Model structure F.model # Source geometry (if available) F.srcGeometry # Receiver geometry (if available) F.recGeometry # Options structure F.options Usage: # Forward modeling (F w/ geometries) d_obs = F*q # Adjoint modeling (F w/ geometries) q_ad = F'*d_obs # Forward modeling (F w/o geometries) d_obs = Pr*F*Ps'*q # Adjoint modelng (F w/o geometries) q_ad = Ps*F'*Pr'*d_obs # Extended source modeling (F w/o geometries) d_obs = Pr*F*Pw'*w # Adjoint extended source modeling (F w/o geometries) w_ad = Pw*F'*Pr'*d_obs # Forward modeling and return full wavefield (F w/o geometries) u = F*Ps'*q # Adjoint modelnig and return wavefield (F w/o geometries) v = F'*Pr'*d_obs # Forward modeling with full wavefield as source (F w/o geometries) d_obs = Pr*F*u # Adjoint modeling with full wavefield as source (F w/o geometries) q_ad = Ps*F*v judiJacobian Jacobian of a non-linear forward modeling operator. Corresponds to linearized Born modeling (forward mode) and reverse-time migration (adjoint mode). Construction: A judiJacobian operator can be create from an exisiting forward modeling operator and a source vector: J = judiJacobian(F, q) # F w/ geometries J = judiJacobian(Pr*F*Ps', q) # F w/o geometries where Ps and Pr are source/receiver projection operators of type judiProjection . A Jacobian can also be created for an extended source modeling operator: J = judiJacobian(Pr*F*Pw', w) where Pw is a judiLRWF operator and w is a judiWeights vector (or 2D/3D Julia array). Accessible fields:: # Info structure J.info # Model structure J.model # Source geometry (if available) J.srcGeometry # Receiver geometry J.recGeometry # Source wavelet J.wavelet # Weights (extended source modeling only) J.weights # Options structure J.options Usage: # Linearized modeilng d_lin = J*dm # RTM rtm = J'*d_lin # Matrix-free normal operator H = J'*J judiProjection Abstract linear operator for source/receiver projections. A (transposed) judiProjection operator symbolically injects the data with which it is multiplied during modeling. If multiplied with a forward modeling operator, it samples the wavefield at the specified source/receiver locations. Construction: P = judiProjection(info, geometry) Parameters: info : A JUDI Info structure. geometry : A JUDI Geometry structure containing either the source or receiver acquisition set up.s Accessible fields: # Info structure P.info # Source/receiver geometry P.geometry Usage: # Multiply with judiVector to create a judiRHS rhs1 = Pr'*d_obs rhs2 = Ps'*q # Sample wavefield at source/receiver location during modeling d_obs = Pr*F*Ps'*q q_ad = Ps*F*Pr'*d_obs judiLRWF Abstract linear operator for sampling a seismic wavefield as a sum over all time steps, weighted by a time-varying wavelet. Its transpose injects a time-varying wavelet at every grid point in the model. Construction: P = judiLRWF(info, wavelet) Parameters: info : A JUDI Info structure. wavelet : A cell array with one cell per source location, where each cell contains a 1D Julia array of the source wavelet or a single Julia array which will be used for all source location. Accessible fields: # Info structure P.info # Wavelet of i-th source location P.wavelet[i] Usage: # Multiply with a judiWeight vector to create a judiExtendedSource ex_src = Pw'*w # Sample wavefield as a sum over time, weighted by the source u_ex = Pw*F'*Pr'*d_obs","title":"Linear operators"},{"location":"linear_operators/#linear-operators","text":"","title":"Linear Operators"},{"location":"linear_operators/#judimodeling","text":"Seismic modeling operator for solving a wave equation for a given right-hand-side. Construction: Construct a modeling operator without source/receiver projections: F = judiModeling(info, model; options=opt) Construct a modeling operator with source/receiver projections: F = judiModeling(info, model, src_geometry, rec_geometry) Construct a modeling operator from an existing operator without geometries and projection operators: F = Pr*F*Ps' where Ps and Pr are source/receiver projection operators of type judiProjection . Construct a modeling operator for extended source modeling : F = Pr*F*Pw' where Pw is a judiLRWF (low-rank-wavefield) projection operator. Parameters: info : A Info structure. model : A Model structure containg the velocity model and grid specifications. src_geometry : An object of type Geometry containing the source geometry. rec_geometry : An object of type Geometry containing the receiver geometry. opt : An object of type Options , specifying additional modeling parameters. Accessible fields: # Info structure F.info # Model structure F.model # Source geometry (if available) F.srcGeometry # Receiver geometry (if available) F.recGeometry # Options structure F.options Usage: # Forward modeling (F w/ geometries) d_obs = F*q # Adjoint modeling (F w/ geometries) q_ad = F'*d_obs # Forward modeling (F w/o geometries) d_obs = Pr*F*Ps'*q # Adjoint modelng (F w/o geometries) q_ad = Ps*F'*Pr'*d_obs # Extended source modeling (F w/o geometries) d_obs = Pr*F*Pw'*w # Adjoint extended source modeling (F w/o geometries) w_ad = Pw*F'*Pr'*d_obs # Forward modeling and return full wavefield (F w/o geometries) u = F*Ps'*q # Adjoint modelnig and return wavefield (F w/o geometries) v = F'*Pr'*d_obs # Forward modeling with full wavefield as source (F w/o geometries) d_obs = Pr*F*u # Adjoint modeling with full wavefield as source (F w/o geometries) q_ad = Ps*F*v","title":"judiModeling"},{"location":"linear_operators/#judijacobian","text":"Jacobian of a non-linear forward modeling operator. Corresponds to linearized Born modeling (forward mode) and reverse-time migration (adjoint mode). Construction: A judiJacobian operator can be create from an exisiting forward modeling operator and a source vector: J = judiJacobian(F, q) # F w/ geometries J = judiJacobian(Pr*F*Ps', q) # F w/o geometries where Ps and Pr are source/receiver projection operators of type judiProjection . A Jacobian can also be created for an extended source modeling operator: J = judiJacobian(Pr*F*Pw', w) where Pw is a judiLRWF operator and w is a judiWeights vector (or 2D/3D Julia array). Accessible fields:: # Info structure J.info # Model structure J.model # Source geometry (if available) J.srcGeometry # Receiver geometry J.recGeometry # Source wavelet J.wavelet # Weights (extended source modeling only) J.weights # Options structure J.options Usage: # Linearized modeilng d_lin = J*dm # RTM rtm = J'*d_lin # Matrix-free normal operator H = J'*J","title":"judiJacobian"},{"location":"linear_operators/#judiprojection","text":"Abstract linear operator for source/receiver projections. A (transposed) judiProjection operator symbolically injects the data with which it is multiplied during modeling. If multiplied with a forward modeling operator, it samples the wavefield at the specified source/receiver locations. Construction: P = judiProjection(info, geometry) Parameters: info : A JUDI Info structure. geometry : A JUDI Geometry structure containing either the source or receiver acquisition set up.s Accessible fields: # Info structure P.info # Source/receiver geometry P.geometry Usage: # Multiply with judiVector to create a judiRHS rhs1 = Pr'*d_obs rhs2 = Ps'*q # Sample wavefield at source/receiver location during modeling d_obs = Pr*F*Ps'*q q_ad = Ps*F*Pr'*d_obs","title":"judiProjection"},{"location":"linear_operators/#judilrwf","text":"Abstract linear operator for sampling a seismic wavefield as a sum over all time steps, weighted by a time-varying wavelet. Its transpose injects a time-varying wavelet at every grid point in the model. Construction: P = judiLRWF(info, wavelet) Parameters: info : A JUDI Info structure. wavelet : A cell array with one cell per source location, where each cell contains a 1D Julia array of the source wavelet or a single Julia array which will be used for all source location. Accessible fields: # Info structure P.info # Wavelet of i-th source location P.wavelet[i] Usage: # Multiply with a judiWeight vector to create a judiExtendedSource ex_src = Pw'*w # Sample wavefield as a sum over time, weighted by the source u_ex = Pw*F'*Pr'*d_obs","title":"judiLRWF"},{"location":"preconditioners/","text":"Seismic preconditioners Model topmute Create a linear operator for a 2D model topmute, i.e. for muting the water column: Mr = judiTopmute(n, mute_start, length) Parameters: n : Tuple of model dimensions (e.g. from model.n ) mute_start : First grid point in z-direction from where on to mute the image. Can be a single integer or a vector of length nx , where nx is the number of grid points in x direction. length : The mask is created with a linear taper from 0 to 1. The width of the taper is length . Usage: # Forward m_mute = Mr*vec(m) # Adjoint m_mute = Mr'*vec(m) As Mr is self adjoint, Mr is equal to Mr' . Model depth scaling Create a 2D model depth scaling: Mr = judiDepthScaling(model) Parameters: model : JUDI Model structure. Data topmute (experimental) Create a data topmute for a 2D marine shot record (i.e. for a shot record with an end-on-spread acquisition geometry). Ml = judiMarineTopmute2D(muteStart, geometry; flipmask=false) Parameters: muteStart : Vertical index of the apex of the shot record (i.e. the earliest point from where to mute). geometry : A JUDI Geometry object with the receiver geometry. flipmask : If the source is on the left side, set to false (default). If the source is on the right side, set to true .","title":"Preconditioners"},{"location":"preconditioners/#seismic-preconditioners","text":"","title":"Seismic preconditioners"},{"location":"preconditioners/#model-topmute","text":"Create a linear operator for a 2D model topmute, i.e. for muting the water column: Mr = judiTopmute(n, mute_start, length) Parameters: n : Tuple of model dimensions (e.g. from model.n ) mute_start : First grid point in z-direction from where on to mute the image. Can be a single integer or a vector of length nx , where nx is the number of grid points in x direction. length : The mask is created with a linear taper from 0 to 1. The width of the taper is length . Usage: # Forward m_mute = Mr*vec(m) # Adjoint m_mute = Mr'*vec(m) As Mr is self adjoint, Mr is equal to Mr' .","title":"Model topmute"},{"location":"preconditioners/#model-depth-scaling","text":"Create a 2D model depth scaling: Mr = judiDepthScaling(model) Parameters: model : JUDI Model structure.","title":"Model depth scaling"},{"location":"preconditioners/#data-topmute-experimental","text":"Create a data topmute for a 2D marine shot record (i.e. for a shot record with an end-on-spread acquisition geometry). Ml = judiMarineTopmute2D(muteStart, geometry; flipmask=false) Parameters: muteStart : Vertical index of the apex of the shot record (i.e. the earliest point from where to mute). geometry : A JUDI Geometry object with the receiver geometry. flipmask : If the source is on the left side, set to false (default). If the source is on the right side, set to true .","title":"Data topmute (experimental)"},{"location":"tutorials/","text":"Tutorials These tutorials provide instructions of how to set up various modeling or inversion scenarios with JUDI. For a list of runnable Julia scripts and reproducable research, please also check out the examples directory on Github. 2D Modeling Quickstart To set up a simple 2D modeling experiment with JUDI with an OBN-type acquisition (receivers everywhere), we start by loading the module and building a two layer model: using JUDI.TimeModeling # Grid n = (120, 100) # (x,z) d = (10., 10.) o = (0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, 50:end] .= 5f0 # Squared slowness m = (1f0 ./ v).^2 For working with JUDI operators, we need to set up a model structure, which contains the grid information, as well as the slowness. Optionally, we can provide an array of the density in [g/cm^3] (by default a density of 1 is used): # Density (optional) rho = ones(Float32, n) # Model structure: model = Model(n, d, o, m; rho=rho) Next, we define our source acquisition geometry, which needs to be defined as a Geometry structure. The Geometry function requires the x-, y- and z-coordinates of the source locations as input, as well as the modeling time and samping interval of the wavelet. In general, each parameter can be passed as a cell array, where each cell entry provides the information for the respective source location. The helper function convertToCell converts a Julia range to a cell array, which makes defining the source geometry easier: # Set up source geometry nsrc = 4 # no. of sources xsrc = convertToCell(range(400f0, stop=800f0, length=nsrc)) ysrc = convertToCell(range(0f0, stop=0f0, length=nsrc)) zsrc = convertToCell(range(20f0, stop=20f0, length=nsrc)) # Modeling time and sampling interval time = 1000f0 # ms dt = 2f0 # ms # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) Now we can define our source wavelet. The source must be defined as a judiVector , which takes the source geometry, as well as the source data (i.e. the wavelet) as an input argument: # Source wavelet f0 = 0.01f0 # kHz wavelet = ricker_wavelet(time, dt, f0) q = judiVector(src_geometry, wavelet) In general, wavelet can be a cell array with a different wavelet in each cell, i.e. for every source location. Here, we want to use the same wavelet for all 4 source experiments, so we can simply pass a single vector. As we already specified in our src_geometry object that we want to have 4 source locations, judiVector will automaticallty copy the wavelet for every experiment. Next, we set up the receiver acquisition geometry. Here, we define an OBN acquisition, where the receivers are spread out over the entire domain and each source experiment uses the same set of receivers. Again, we can in principle pass the coordinates as cell arrays, with one cell per source location. Since we want to use the same geometry for every source, we can use a short cut and define the coordinates as Julia ranges and pass nsrc=nsrc as an optional argument to the Geometry function. This tells the function that we want to use our receiver set up for nsrc distinct source experiments: # Set up receiver geometry (for 2D, set yrec to zero) nxrec = 120 xrec = range(50f0, stop=1150f0, length=nxrec) yrec = 0f0 zrec = range(50f0, stop=50f0, length=nxrec) # Set up receiver structure rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc) With our model and source and receiver geometries in place, we can proceed to defining our linear operator for seismic modeling. First, we need to define an info object, which contains some basic dimensionality information that needs to be shared between operators so that they can determine their size: # Set up info structure for linear operators ntComp = get_computational_nt(src_geometry, rec_geometry, model) info = Info(prod(n), nsrc, ntComp) Next, we can define separate operators for source/receiver projections and a forward modeling operator: # Setup operators Pr = judiProjection(info, rec_geometry) A_inv = judiModeling(info, model) Ps = judiProjection(info, src_geometry) We can see, that from JUDI's perspective, source and receivers are treated equally and are represented by the same operators ( judiProjection ) and vectors ( judiVector ). We also could've skipped setting up the projection operators and directly created: F = judiModeling(info, model, src_geometry, rec_geometry) which is equivalent to creating the combined operator: F = Pr*A_inv*Ps' Finally, to model our seismic data, we run: d_obs = Pr*A_inv*Ps'*q # or d_obs = F*q We can plot a 2D shot record by accessing the .data field of the judiVector , which contains the data in the original (non-vectorized) dimensions: using PyPlot imshow(d_obs.data[1], vmin=-5, vmax=5, cmap=\"seismic\", aspect=\"auto\") We can also set up a Jacobian operator for Born modeling and reverse-time migration. First we set up a (constant) migration velocity model: v0 = ones(Float32, n) .* 1.4f0 m0 = (1f0 ./ v0).^2 dm = m - m0 # model perturbation/image # Model structure model0 = Model(n, d, o, m0) We can create the Jacobian directly from a (non-linear) modeling operator and a source vector: A0_inv = judiModeling(info, model0) # modeling operator for migration velocity J = judiJacobian(Pr*A0_inv*Ps', q) We can use this operator to model single scattered data, as well as for migration our previous data: d_lin = J*vec(dm) # RTM rtm = J'*d_obs To plot, first reshape the image: rtm = reshape(rtm, model0.n) imshow(rtm', cmap=\"gray\", vmin=-1e3, vmax=1e3) 3D Modeling Quickstart Setting up a 3D experiment largely follows the instructions for the 2D example. Instead of a 2D model, we define our velocity model as: using JUDI.TimeModeling # Grid n = (120, 100, 80) # (x,y,z) d = (10., 10., 10.) o = (0., 0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, :, 40:end] .= 5f0 # Squared slowness and model structure m = (1f0 ./ v).^2 model = Model(n, d, o, m) Our source coordinates now also need to have the y-coordinate defined: # Set up source geometry nsrc = 4 # no. of sources xsrc = convertToCell(range(400f0, stop=800f0, length=nsrc)) ysrc = convertToCell(range(200f0, stop=1000f0, length=nsrc)) zsrc = convertToCell(range(20f0, stop=20f0, length=nsrc)) # Modeling time and sampling interval time = 1000f0 # ms dt = 2f0 # ms # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) Our source wavelet, is set up as in the 2D case: # Source wavelet f0 = 0.01f0 # kHz wavelet = ricker_wavelet(time, dt, f0) q = judiVector(src_geometry, wavelet) For the receivers, we generally need to define each coordinate (x, y, z) for every receiver. I.e. xrec , yrec and zrec each have the length of the total number of receivers. However, oftentimes we are interested in a regular receiver grid, which can be defined by two basis vectors and a constant depth value for all receivers. We can then use the setup_3D_grid helper function to create the full set of coordinates: # Receiver geometry nxrec = 120 nyrec = 100 xrec = range(50f0, stop=1150f0, length=nxrec) yrec = range(100f0, stop=900f0, length=nyrec) zrec = 50f0 # Construct 3D grid from basis vectors (xrec, yrec, zrec) = setup_3D_grid(xrec, yrec, zrec) # Set up receiver structure rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc) Setting up the modeling operators is done as in the previous 2D case: # Set up info structure for linear operators ntComp = get_computational_nt(src_geometry, rec_geometry, model) info = Info(prod(n), nsrc, ntComp) # Setup operators Pr = judiProjection(info, rec_geometry) A_inv = judiModeling(info, model) Ps = judiProjection(info, src_geometry) # Model data d_obs = Pr*A_inv*Ps'*q The 3D shot records are still saved as 2D arrays of dimensions time x (nxrec*nyrec) : using PyPlot imshow(d_obs.data[1], vmin=-.4, vmax=.4, cmap=\"seismic\", aspect=\"auto\") Marine streamer 2D acquisition For a marine streamer acquisition, we need to define a moving set of receivers representing a streamer that is towed behind a seismic source vessel. In JUDI, this is easily done by defining a different set of receivers for each source location. Here, we explain how to set up the Geometry objects for a 2D marine streamer acquisition. If we define that our streamer is to the right side of the source vessel, this has the effect that part of the streamer is outside the grid while our vessel is in the right side of the model. To circumvent this, we can say that our streamer is on the right side of the source while the vessel is in the left-hand side of the model and vice versa. This way, we get the full maximum offset coverage for every source location (assuming that the maximum offset is less or equal than half the domain size). First, we have to specify our domain size (the physical extent of our model), as well as the number of receivers and the minimum and maximum offset: domain_x = (model.n[1] - 1)*model.d[1] # horizontal extent of model nrec = 120 # no. of receivers xmin = 50f0 # leave buffer zone w/o source and receivers of this size xmax = domain_x - 50f0 min_offset = 10f0 # distance between source and first receiver max_offset = 400f0 # distance between source and last xmid = domain_x / 2 # midpoint of model source_spacing = 25f0 # source interval [m] For the JUDI Geometry objects, we need to create cell arrays for the source and receiver coordinates, with one cell entry per source location: # Source/receivers nsrc = 20 # number of shot locations # Receiver coordinates xrec = Array{Any}(undef, nsrc) yrec = Array{Any}(undef, nsrc) zrec = Array{Any}(undef, nsrc) # Source coordinates xsrc = Array{Any}(undef, nsrc) ysrc = Array{Any}(undef, nsrc) zsrc = Array{Any}(undef, nsrc) Next, we compute the source and receiver coordinates for when the vessel moves from left to right in the right-hand side of the model: # Vessel goes from left to right in right-hand side of model nsrc_half = Int(nsrc/2) for j=1:nsrc_half xloc = xmid + (j-1)*source_spacing # Current receiver locations xrec[j] = range(xloc - max_offset, xloc - min_offset, length=nrec) yrec[j] = 0. zrec[j] = range(50f0, 50f0, length=nrec) # Current source xsrc[j] = xloc ysrc[j] = 0f0 zsrc[j] = 20f0 end Then, we repeat this for the case where the vessel goes from right to left in the left-hand model side: # Vessel goes from right to left in left-hand side of model for j=1:nsrc_half xloc = xmid - (j-1)*source_spacing # Current receiver locations xrec[nsrc_half + j] = range(xloc + min_offset, xloc + max_offset, length=nrec) yrec[nsrc_half + j] = 0f0 zrec[nsrc_half + j] = range(50f0, 50f0, length=nrec) # Current source xsrc[nsrc_half + j] = xloc ysrc[nsrc_half + j] = 0f0 zsrc[nsrc_half + j] = 20f0 end Finally, we can set the modeling time and sampling interval and create the Geometry objects: # receiver sampling and recording time time = 10000f0 # receiver recording time [ms] dt = 4f0 # receiver sampling interval # Set geometry objects rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time) src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) You can find a full (reproducable) example for generating a marine streamer data set for the Sigsbee 2A model here . Simultaneous sources To set up a simultaneous source with JUDI, we first create a cell array with nsrc cells, where nsrc is the number of separate experiments (here nsrc=1 ). For a simultaneous source, we create an array of source coordinates for each cell entry. In fact, this is exactly like setting up the receiver geometry, in which case we define multiple receivers per shot location. Here, we define a single experiment with a simultaneous source consisting of four sources: nsrc = 1 # single simultaneous source xsrc = Array{Any}(undef, nsrc) ysrc = Array{Any}(undef, nsrc) zsrc = Array{Any}(undef, nsrc) # Set up source geometry xsrc[1] = [250f0, 500f0, 750f0, 1000f0] # four simultaneous sources ysrc[1] = 0f0 zsrc[1] = [50f0, 50f0, 50f0, 50f0] # Source sampling and number of time steps time = 2000f0 dt = 4f0 # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) With the simultaneous source geometry in place, we can now create our simultaneous data. As we have four sources per sim. source, we create an array of dimensions 4 x src_geometry.nt[1] and fill it with wavelets of different time shifts: # Create wavelet f0 = 0.01 # source peak frequencies q = ricker_wavelet(500f0, dt, f0) # 500 ms wavelet # Create array with different time shifts of the wavelet wavelet = zeros(Float32, 4, src_geometry.nt[1]) wavelet[1, 1:1+length(q)-1] = q wavelet[2, 41:41+length(q)-1] = q wavelet[3, 121:121+length(q)-1] = q wavelet[4, 201:201+length(q)-1] = q Finally, we create our simultaneous source as a judiVector : # Source wavelet q = judiVector(src_geometry, wavelet) Working with wavefields JUDI allows computing full time domain wavefields and using them as right-hand sides for wave equations solves. This tutorial shows how. We start by setting up a basic 2D experiment: using JUDI.TimeModeling # Grid n = (120, 100) # (x,z) d = (10., 10.) o = (0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, 50:end] .= 5f0 # Squared slowness m = (1f0 ./ v).^2 # Model structure: model = Model(n, d, o, m) Next, we set up the source geometry for a single source experiment: # Set up source geometry nsrc = 1 # no. of sources xsrc = convertToCell([600f0]) ysrc = convertToCell([0f0]) zsrc = convertToCell([20f0]) # Modeling time and sampling interval time = 600f0 # ms dt = 4f0 # ms # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) # Source wavelet f0 = 0.01f0 # kHz wavelet = ricker_wavelet(time, dt, f0) q = judiVector(src_geometry, wavelet) As in the 2D quick start tutorial, we create our info structure, modeling operator and source projection operator: # Set up info structure for linear operators ntComp = get_computational_nt(src_geometry, model) info = Info(prod(n), nsrc, ntComp) # Setup operators A_inv = judiModeling(info, model) Ps = judiProjection(info, src_geometry) To model a wavefield, we simply omit the receiver sampling operator: u = A_inv*Ps'*q This return an abstract data vector called judiWavefield . Similar to judiVectors , we can access the data for each source number i via u.data[i] . The data is a 3D array of size (nt, nx, nz) for 2D and a 4D array of size (nt, nx, ny, nz) for 3D. We can plot the wavefield of the 600th time step with: using PyPlot imshow(u.data[1][600, :, :]', vmin=-5, vmax=5, cmap=\"seismic\", aspect=\"auto\") We can also use the computed wavefield u as a right-hand side for forward and adjoint wave equation solves: v = A_inv*u w = A_inv'*u Similarly, by setting up a receiver projection operator, we can use wavefields as right-hand sides, but restrict the output to the receiver locations. Extended source modeling JUDI supports extened source modeling, which injects a 1D wavelet q at every point in the subsurface weighted by a spatially varying extended source. To demonstrate extended source modeling, we first set up a runnable 2D experiment with JUDI. We start with defining the model: using JUDI.TimeModeling # Grid n = (120, 100) # (x,z) d = (10., 10.) o = (0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, 50:end] .= 5f0 # Squared slowness m = (1f0 ./ v).^2 # Model structure: model = Model(n, d, o, m) Next, we set up the receiver geometry: # Number of experiments nsrc = 2 # Set up receiver geometry nxrec = 120 xrec = range(50f0, stop=1150f0, length=nxrec) yrec = 0f0 zrec = range(50f0, stop=50f0, length=nxrec) # Modeling time and receiver sampling interval time = 2000 dt = 4 # Set up receiver structure rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc) For the extended source, we do not need to set up a source geometry object, but we need to define a wavelet function: # Source wavelet f0 = 0.01f0 # MHz wavelet = ricker_wavelet(time, dt, f0) As before, we set up an info structure, as well as a modeling operator and a receiver sampling operator: # Set up info structure for linear operators ntComp = get_computational_nt(rec_geometry, model) info = Info(prod(n), nsrc, ntComp) # Setup operators A_inv = judiModeling(info, model) Pr = judiProjection(info, rec_geometry) We define our extended source as a so called judiWeights vector. Similar to a judiVector , the data of this abstract vector is stored as a cell array, where each cell corresponds to one source experiment. We create a cell array of length two and create a random array of the size of the model as our extended source: weights = Array{Array}(undef, nsrc) for j=1:nsrc weights[j] = randn(Float32, model.n) end w = judiWeights(weights) To inject the extended source into the model and weight it by the wavelet, we create a special projection operator called judiLRWF (for JUDI low-rank wavefield). This operator needs to know the wavelet we defined earlier. We can then create our full modeling operator, by combining Pw with A_inv and the receiver sampling operator: # Create operator for injecting the weights, multiplied by the provided wavelet(s) Pw = judiLRWF(info, wavelet) # Model observed data w/ extended source F = Pr*A_inv*adjoint(Pw) Extended source modeling supports both forward and adjoint modeling: # Simultaneous observed data d_sim = F*w dw = adjoint(F)*d_sim As for regular modeling, we can create a Jacobian for linearized modeling and migration. First we define a migration velocity model and the corresponding modeling operator A0_inv : # Migration velocity and squared slowness v0 = ones(Float32, n) .* 1.4f0 m0 = (1f0 ./ v0).^2 # Model structure and modeling operator for migration velocity model0 = Model(n, d, o, m0) A0_inv = judiModeling(info, model0) # Jacobian and RTM J = judiJacobian(Pr*A0_inv*adjoint(Pw), w) rtm = adjoint(J)*d_sim As before, we can plot the image after reshaping it into its original dimensions: rtm = reshape(rtm, model.n) imshow(rtm', cmap=\"gray\", vmin=-3e6, vmax=3e6) Please also refer to the reproducable example on github for 2D and 3D extended modeling. Impedance imaging (inverse scattering) JUDI supports imaging (RTM) and demigration (linearized modeling) using the linearized inverse scattering imaging condition (ISIC) and its corresponding adjoint. ISIC can be enabled via the Options class. You can set this options when you initially create the modeling operator: # Options strucuture opt = Options(isic=true) # Set up modeling operator A0_inv = judiModeling(info, model0; options=opt) When you create a Jacobian from a forward modeling operator, the Jacobian inherits the options from A0_inv : J = judiJacobian(Pr*A0_inv*Ps', q) J.options.isic # -> true Alternatively, you can directly set the option in your Jacobian: J.options.isic = true # enable isic J.options.isic = false # disable isic Optimal checkpointing JUDI supports optimal checkpointing via Devito's interface to the Revolve library. To enable checkpointing, use the Options class: # Options strucuture opt = Options(optimal_checkpointing=true) # Set up modeling operator A0_inv = judiModeling(info, model0; options=opt) When you create a Jacobian from a forward modeling operator, the Jacobian inherits the options from A0_inv : J = judiJacobian(Pr*A0_inv*Ps', q) J.options.optimal_checkpointing # -> true Alternatively, you can directly set the option in your Jacobian: J.options.optimal_checkpointing = true # enable checkpointing J.options.optimal_checkpointing = false # disable checkpointing On-the-fly Fourier transforms JUDI supports seismic imaging in the frequency domain using on-the-fly discrete Fourier transforms (DFTs). To compute an RTM image in the frequency domain for a given set of frequencies, we first create a cell array for the frequencies of each source experiment: nsrc = 4 # assume 4 source experiments frequencies = Array{Any}(undef, nsrc) Now we can define single or multiple frequencies for each shot location for which the RTM will be computed: # For every source location, compute RTM image for 10 and 20 Hz for j=1:nsrc frequencies[j] = [0.001, 0.002] end The frequencies are passed to the Jacobian via the options field. Assuming we already have a Jacobian set up, we set the frequencies via: J.options.frequencies = frequencies Instead of the same two frequencies for each source experiment, we could have chosen different random sets of frequencies, which creates an RTM with incoherent noise. We can also draw random frequencies using the frequency spectrum of the true source as the probability density function. To create a distribution for a given source q ( judiVector ) from which we can draw frequency samples, use: q_dist = generate_distribution(q) Then we can assigne a random set of frequencies in a specified range as follows: nfreq = 10 # no. of frequencies per source location for j=1:nsrc J.options.frequencies[j] = select_frequencies(q_dist; fmin=0.003, fmax=0.04, nf=nfreq) end Once the options.frequencies field is set, on-the-fly DFTs are used for both born modeling and RTM. To save computational cost, we can limit the number of DFTs that are performed. Rather than computing the DFT at every time step, we can define a subsampling factor as follows: # Compute DFT every 4 time steps J.options.dft_subsampling_factor=4","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"These tutorials provide instructions of how to set up various modeling or inversion scenarios with JUDI. For a list of runnable Julia scripts and reproducable research, please also check out the examples directory on Github.","title":"Tutorials"},{"location":"tutorials/#2d-modeling-quickstart","text":"To set up a simple 2D modeling experiment with JUDI with an OBN-type acquisition (receivers everywhere), we start by loading the module and building a two layer model: using JUDI.TimeModeling # Grid n = (120, 100) # (x,z) d = (10., 10.) o = (0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, 50:end] .= 5f0 # Squared slowness m = (1f0 ./ v).^2 For working with JUDI operators, we need to set up a model structure, which contains the grid information, as well as the slowness. Optionally, we can provide an array of the density in [g/cm^3] (by default a density of 1 is used): # Density (optional) rho = ones(Float32, n) # Model structure: model = Model(n, d, o, m; rho=rho) Next, we define our source acquisition geometry, which needs to be defined as a Geometry structure. The Geometry function requires the x-, y- and z-coordinates of the source locations as input, as well as the modeling time and samping interval of the wavelet. In general, each parameter can be passed as a cell array, where each cell entry provides the information for the respective source location. The helper function convertToCell converts a Julia range to a cell array, which makes defining the source geometry easier: # Set up source geometry nsrc = 4 # no. of sources xsrc = convertToCell(range(400f0, stop=800f0, length=nsrc)) ysrc = convertToCell(range(0f0, stop=0f0, length=nsrc)) zsrc = convertToCell(range(20f0, stop=20f0, length=nsrc)) # Modeling time and sampling interval time = 1000f0 # ms dt = 2f0 # ms # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) Now we can define our source wavelet. The source must be defined as a judiVector , which takes the source geometry, as well as the source data (i.e. the wavelet) as an input argument: # Source wavelet f0 = 0.01f0 # kHz wavelet = ricker_wavelet(time, dt, f0) q = judiVector(src_geometry, wavelet) In general, wavelet can be a cell array with a different wavelet in each cell, i.e. for every source location. Here, we want to use the same wavelet for all 4 source experiments, so we can simply pass a single vector. As we already specified in our src_geometry object that we want to have 4 source locations, judiVector will automaticallty copy the wavelet for every experiment. Next, we set up the receiver acquisition geometry. Here, we define an OBN acquisition, where the receivers are spread out over the entire domain and each source experiment uses the same set of receivers. Again, we can in principle pass the coordinates as cell arrays, with one cell per source location. Since we want to use the same geometry for every source, we can use a short cut and define the coordinates as Julia ranges and pass nsrc=nsrc as an optional argument to the Geometry function. This tells the function that we want to use our receiver set up for nsrc distinct source experiments: # Set up receiver geometry (for 2D, set yrec to zero) nxrec = 120 xrec = range(50f0, stop=1150f0, length=nxrec) yrec = 0f0 zrec = range(50f0, stop=50f0, length=nxrec) # Set up receiver structure rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc) With our model and source and receiver geometries in place, we can proceed to defining our linear operator for seismic modeling. First, we need to define an info object, which contains some basic dimensionality information that needs to be shared between operators so that they can determine their size: # Set up info structure for linear operators ntComp = get_computational_nt(src_geometry, rec_geometry, model) info = Info(prod(n), nsrc, ntComp) Next, we can define separate operators for source/receiver projections and a forward modeling operator: # Setup operators Pr = judiProjection(info, rec_geometry) A_inv = judiModeling(info, model) Ps = judiProjection(info, src_geometry) We can see, that from JUDI's perspective, source and receivers are treated equally and are represented by the same operators ( judiProjection ) and vectors ( judiVector ). We also could've skipped setting up the projection operators and directly created: F = judiModeling(info, model, src_geometry, rec_geometry) which is equivalent to creating the combined operator: F = Pr*A_inv*Ps' Finally, to model our seismic data, we run: d_obs = Pr*A_inv*Ps'*q # or d_obs = F*q We can plot a 2D shot record by accessing the .data field of the judiVector , which contains the data in the original (non-vectorized) dimensions: using PyPlot imshow(d_obs.data[1], vmin=-5, vmax=5, cmap=\"seismic\", aspect=\"auto\") We can also set up a Jacobian operator for Born modeling and reverse-time migration. First we set up a (constant) migration velocity model: v0 = ones(Float32, n) .* 1.4f0 m0 = (1f0 ./ v0).^2 dm = m - m0 # model perturbation/image # Model structure model0 = Model(n, d, o, m0) We can create the Jacobian directly from a (non-linear) modeling operator and a source vector: A0_inv = judiModeling(info, model0) # modeling operator for migration velocity J = judiJacobian(Pr*A0_inv*Ps', q) We can use this operator to model single scattered data, as well as for migration our previous data: d_lin = J*vec(dm) # RTM rtm = J'*d_obs To plot, first reshape the image: rtm = reshape(rtm, model0.n) imshow(rtm', cmap=\"gray\", vmin=-1e3, vmax=1e3)","title":"2D Modeling Quickstart"},{"location":"tutorials/#3d-modeling-quickstart","text":"Setting up a 3D experiment largely follows the instructions for the 2D example. Instead of a 2D model, we define our velocity model as: using JUDI.TimeModeling # Grid n = (120, 100, 80) # (x,y,z) d = (10., 10., 10.) o = (0., 0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, :, 40:end] .= 5f0 # Squared slowness and model structure m = (1f0 ./ v).^2 model = Model(n, d, o, m) Our source coordinates now also need to have the y-coordinate defined: # Set up source geometry nsrc = 4 # no. of sources xsrc = convertToCell(range(400f0, stop=800f0, length=nsrc)) ysrc = convertToCell(range(200f0, stop=1000f0, length=nsrc)) zsrc = convertToCell(range(20f0, stop=20f0, length=nsrc)) # Modeling time and sampling interval time = 1000f0 # ms dt = 2f0 # ms # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) Our source wavelet, is set up as in the 2D case: # Source wavelet f0 = 0.01f0 # kHz wavelet = ricker_wavelet(time, dt, f0) q = judiVector(src_geometry, wavelet) For the receivers, we generally need to define each coordinate (x, y, z) for every receiver. I.e. xrec , yrec and zrec each have the length of the total number of receivers. However, oftentimes we are interested in a regular receiver grid, which can be defined by two basis vectors and a constant depth value for all receivers. We can then use the setup_3D_grid helper function to create the full set of coordinates: # Receiver geometry nxrec = 120 nyrec = 100 xrec = range(50f0, stop=1150f0, length=nxrec) yrec = range(100f0, stop=900f0, length=nyrec) zrec = 50f0 # Construct 3D grid from basis vectors (xrec, yrec, zrec) = setup_3D_grid(xrec, yrec, zrec) # Set up receiver structure rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc) Setting up the modeling operators is done as in the previous 2D case: # Set up info structure for linear operators ntComp = get_computational_nt(src_geometry, rec_geometry, model) info = Info(prod(n), nsrc, ntComp) # Setup operators Pr = judiProjection(info, rec_geometry) A_inv = judiModeling(info, model) Ps = judiProjection(info, src_geometry) # Model data d_obs = Pr*A_inv*Ps'*q The 3D shot records are still saved as 2D arrays of dimensions time x (nxrec*nyrec) : using PyPlot imshow(d_obs.data[1], vmin=-.4, vmax=.4, cmap=\"seismic\", aspect=\"auto\")","title":"3D Modeling Quickstart"},{"location":"tutorials/#marine-streamer-2d-acquisition","text":"For a marine streamer acquisition, we need to define a moving set of receivers representing a streamer that is towed behind a seismic source vessel. In JUDI, this is easily done by defining a different set of receivers for each source location. Here, we explain how to set up the Geometry objects for a 2D marine streamer acquisition. If we define that our streamer is to the right side of the source vessel, this has the effect that part of the streamer is outside the grid while our vessel is in the right side of the model. To circumvent this, we can say that our streamer is on the right side of the source while the vessel is in the left-hand side of the model and vice versa. This way, we get the full maximum offset coverage for every source location (assuming that the maximum offset is less or equal than half the domain size). First, we have to specify our domain size (the physical extent of our model), as well as the number of receivers and the minimum and maximum offset: domain_x = (model.n[1] - 1)*model.d[1] # horizontal extent of model nrec = 120 # no. of receivers xmin = 50f0 # leave buffer zone w/o source and receivers of this size xmax = domain_x - 50f0 min_offset = 10f0 # distance between source and first receiver max_offset = 400f0 # distance between source and last xmid = domain_x / 2 # midpoint of model source_spacing = 25f0 # source interval [m] For the JUDI Geometry objects, we need to create cell arrays for the source and receiver coordinates, with one cell entry per source location: # Source/receivers nsrc = 20 # number of shot locations # Receiver coordinates xrec = Array{Any}(undef, nsrc) yrec = Array{Any}(undef, nsrc) zrec = Array{Any}(undef, nsrc) # Source coordinates xsrc = Array{Any}(undef, nsrc) ysrc = Array{Any}(undef, nsrc) zsrc = Array{Any}(undef, nsrc) Next, we compute the source and receiver coordinates for when the vessel moves from left to right in the right-hand side of the model: # Vessel goes from left to right in right-hand side of model nsrc_half = Int(nsrc/2) for j=1:nsrc_half xloc = xmid + (j-1)*source_spacing # Current receiver locations xrec[j] = range(xloc - max_offset, xloc - min_offset, length=nrec) yrec[j] = 0. zrec[j] = range(50f0, 50f0, length=nrec) # Current source xsrc[j] = xloc ysrc[j] = 0f0 zsrc[j] = 20f0 end Then, we repeat this for the case where the vessel goes from right to left in the left-hand model side: # Vessel goes from right to left in left-hand side of model for j=1:nsrc_half xloc = xmid - (j-1)*source_spacing # Current receiver locations xrec[nsrc_half + j] = range(xloc + min_offset, xloc + max_offset, length=nrec) yrec[nsrc_half + j] = 0f0 zrec[nsrc_half + j] = range(50f0, 50f0, length=nrec) # Current source xsrc[nsrc_half + j] = xloc ysrc[nsrc_half + j] = 0f0 zsrc[nsrc_half + j] = 20f0 end Finally, we can set the modeling time and sampling interval and create the Geometry objects: # receiver sampling and recording time time = 10000f0 # receiver recording time [ms] dt = 4f0 # receiver sampling interval # Set geometry objects rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time) src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) You can find a full (reproducable) example for generating a marine streamer data set for the Sigsbee 2A model here .","title":"Marine streamer 2D acquisition"},{"location":"tutorials/#simultaneous-sources","text":"To set up a simultaneous source with JUDI, we first create a cell array with nsrc cells, where nsrc is the number of separate experiments (here nsrc=1 ). For a simultaneous source, we create an array of source coordinates for each cell entry. In fact, this is exactly like setting up the receiver geometry, in which case we define multiple receivers per shot location. Here, we define a single experiment with a simultaneous source consisting of four sources: nsrc = 1 # single simultaneous source xsrc = Array{Any}(undef, nsrc) ysrc = Array{Any}(undef, nsrc) zsrc = Array{Any}(undef, nsrc) # Set up source geometry xsrc[1] = [250f0, 500f0, 750f0, 1000f0] # four simultaneous sources ysrc[1] = 0f0 zsrc[1] = [50f0, 50f0, 50f0, 50f0] # Source sampling and number of time steps time = 2000f0 dt = 4f0 # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) With the simultaneous source geometry in place, we can now create our simultaneous data. As we have four sources per sim. source, we create an array of dimensions 4 x src_geometry.nt[1] and fill it with wavelets of different time shifts: # Create wavelet f0 = 0.01 # source peak frequencies q = ricker_wavelet(500f0, dt, f0) # 500 ms wavelet # Create array with different time shifts of the wavelet wavelet = zeros(Float32, 4, src_geometry.nt[1]) wavelet[1, 1:1+length(q)-1] = q wavelet[2, 41:41+length(q)-1] = q wavelet[3, 121:121+length(q)-1] = q wavelet[4, 201:201+length(q)-1] = q Finally, we create our simultaneous source as a judiVector : # Source wavelet q = judiVector(src_geometry, wavelet)","title":"Simultaneous sources"},{"location":"tutorials/#working-with-wavefields","text":"JUDI allows computing full time domain wavefields and using them as right-hand sides for wave equations solves. This tutorial shows how. We start by setting up a basic 2D experiment: using JUDI.TimeModeling # Grid n = (120, 100) # (x,z) d = (10., 10.) o = (0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, 50:end] .= 5f0 # Squared slowness m = (1f0 ./ v).^2 # Model structure: model = Model(n, d, o, m) Next, we set up the source geometry for a single source experiment: # Set up source geometry nsrc = 1 # no. of sources xsrc = convertToCell([600f0]) ysrc = convertToCell([0f0]) zsrc = convertToCell([20f0]) # Modeling time and sampling interval time = 600f0 # ms dt = 4f0 # ms # Set up source structure src_geometry = Geometry(xsrc, ysrc, zsrc; dt=dt, t=time) # Source wavelet f0 = 0.01f0 # kHz wavelet = ricker_wavelet(time, dt, f0) q = judiVector(src_geometry, wavelet) As in the 2D quick start tutorial, we create our info structure, modeling operator and source projection operator: # Set up info structure for linear operators ntComp = get_computational_nt(src_geometry, model) info = Info(prod(n), nsrc, ntComp) # Setup operators A_inv = judiModeling(info, model) Ps = judiProjection(info, src_geometry) To model a wavefield, we simply omit the receiver sampling operator: u = A_inv*Ps'*q This return an abstract data vector called judiWavefield . Similar to judiVectors , we can access the data for each source number i via u.data[i] . The data is a 3D array of size (nt, nx, nz) for 2D and a 4D array of size (nt, nx, ny, nz) for 3D. We can plot the wavefield of the 600th time step with: using PyPlot imshow(u.data[1][600, :, :]', vmin=-5, vmax=5, cmap=\"seismic\", aspect=\"auto\") We can also use the computed wavefield u as a right-hand side for forward and adjoint wave equation solves: v = A_inv*u w = A_inv'*u Similarly, by setting up a receiver projection operator, we can use wavefields as right-hand sides, but restrict the output to the receiver locations.","title":"Working with wavefields"},{"location":"tutorials/#extended-source-modeling","text":"JUDI supports extened source modeling, which injects a 1D wavelet q at every point in the subsurface weighted by a spatially varying extended source. To demonstrate extended source modeling, we first set up a runnable 2D experiment with JUDI. We start with defining the model: using JUDI.TimeModeling # Grid n = (120, 100) # (x,z) d = (10., 10.) o = (0., 0.) # Velocity [km/s] v = ones(Float32, n) .* 1.4f0 v[:, 50:end] .= 5f0 # Squared slowness m = (1f0 ./ v).^2 # Model structure: model = Model(n, d, o, m) Next, we set up the receiver geometry: # Number of experiments nsrc = 2 # Set up receiver geometry nxrec = 120 xrec = range(50f0, stop=1150f0, length=nxrec) yrec = 0f0 zrec = range(50f0, stop=50f0, length=nxrec) # Modeling time and receiver sampling interval time = 2000 dt = 4 # Set up receiver structure rec_geometry = Geometry(xrec, yrec, zrec; dt=dt, t=time, nsrc=nsrc) For the extended source, we do not need to set up a source geometry object, but we need to define a wavelet function: # Source wavelet f0 = 0.01f0 # MHz wavelet = ricker_wavelet(time, dt, f0) As before, we set up an info structure, as well as a modeling operator and a receiver sampling operator: # Set up info structure for linear operators ntComp = get_computational_nt(rec_geometry, model) info = Info(prod(n), nsrc, ntComp) # Setup operators A_inv = judiModeling(info, model) Pr = judiProjection(info, rec_geometry) We define our extended source as a so called judiWeights vector. Similar to a judiVector , the data of this abstract vector is stored as a cell array, where each cell corresponds to one source experiment. We create a cell array of length two and create a random array of the size of the model as our extended source: weights = Array{Array}(undef, nsrc) for j=1:nsrc weights[j] = randn(Float32, model.n) end w = judiWeights(weights) To inject the extended source into the model and weight it by the wavelet, we create a special projection operator called judiLRWF (for JUDI low-rank wavefield). This operator needs to know the wavelet we defined earlier. We can then create our full modeling operator, by combining Pw with A_inv and the receiver sampling operator: # Create operator for injecting the weights, multiplied by the provided wavelet(s) Pw = judiLRWF(info, wavelet) # Model observed data w/ extended source F = Pr*A_inv*adjoint(Pw) Extended source modeling supports both forward and adjoint modeling: # Simultaneous observed data d_sim = F*w dw = adjoint(F)*d_sim As for regular modeling, we can create a Jacobian for linearized modeling and migration. First we define a migration velocity model and the corresponding modeling operator A0_inv : # Migration velocity and squared slowness v0 = ones(Float32, n) .* 1.4f0 m0 = (1f0 ./ v0).^2 # Model structure and modeling operator for migration velocity model0 = Model(n, d, o, m0) A0_inv = judiModeling(info, model0) # Jacobian and RTM J = judiJacobian(Pr*A0_inv*adjoint(Pw), w) rtm = adjoint(J)*d_sim As before, we can plot the image after reshaping it into its original dimensions: rtm = reshape(rtm, model.n) imshow(rtm', cmap=\"gray\", vmin=-3e6, vmax=3e6) Please also refer to the reproducable example on github for 2D and 3D extended modeling.","title":"Extended source modeling"},{"location":"tutorials/#impedance-imaging-inverse-scattering","text":"JUDI supports imaging (RTM) and demigration (linearized modeling) using the linearized inverse scattering imaging condition (ISIC) and its corresponding adjoint. ISIC can be enabled via the Options class. You can set this options when you initially create the modeling operator: # Options strucuture opt = Options(isic=true) # Set up modeling operator A0_inv = judiModeling(info, model0; options=opt) When you create a Jacobian from a forward modeling operator, the Jacobian inherits the options from A0_inv : J = judiJacobian(Pr*A0_inv*Ps', q) J.options.isic # -> true Alternatively, you can directly set the option in your Jacobian: J.options.isic = true # enable isic J.options.isic = false # disable isic","title":"Impedance imaging (inverse scattering)"},{"location":"tutorials/#optimal-checkpointing","text":"JUDI supports optimal checkpointing via Devito's interface to the Revolve library. To enable checkpointing, use the Options class: # Options strucuture opt = Options(optimal_checkpointing=true) # Set up modeling operator A0_inv = judiModeling(info, model0; options=opt) When you create a Jacobian from a forward modeling operator, the Jacobian inherits the options from A0_inv : J = judiJacobian(Pr*A0_inv*Ps', q) J.options.optimal_checkpointing # -> true Alternatively, you can directly set the option in your Jacobian: J.options.optimal_checkpointing = true # enable checkpointing J.options.optimal_checkpointing = false # disable checkpointing","title":"Optimal checkpointing"},{"location":"tutorials/#on-the-fly-fourier-transforms","text":"JUDI supports seismic imaging in the frequency domain using on-the-fly discrete Fourier transforms (DFTs). To compute an RTM image in the frequency domain for a given set of frequencies, we first create a cell array for the frequencies of each source experiment: nsrc = 4 # assume 4 source experiments frequencies = Array{Any}(undef, nsrc) Now we can define single or multiple frequencies for each shot location for which the RTM will be computed: # For every source location, compute RTM image for 10 and 20 Hz for j=1:nsrc frequencies[j] = [0.001, 0.002] end The frequencies are passed to the Jacobian via the options field. Assuming we already have a Jacobian set up, we set the frequencies via: J.options.frequencies = frequencies Instead of the same two frequencies for each source experiment, we could have chosen different random sets of frequencies, which creates an RTM with incoherent noise. We can also draw random frequencies using the frequency spectrum of the true source as the probability density function. To create a distribution for a given source q ( judiVector ) from which we can draw frequency samples, use: q_dist = generate_distribution(q) Then we can assigne a random set of frequencies in a specified range as follows: nfreq = 10 # no. of frequencies per source location for j=1:nsrc J.options.frequencies[j] = select_frequencies(q_dist; fmin=0.003, fmax=0.04, nf=nfreq) end Once the options.frequencies field is set, on-the-fly DFTs are used for both born modeling and RTM. To save computational cost, we can limit the number of DFTs that are performed. Rather than computing the DFT at every time step, we can define a subsampling factor as follows: # Compute DFT every 4 time steps J.options.dft_subsampling_factor=4","title":"On-the-fly Fourier transforms"}]}